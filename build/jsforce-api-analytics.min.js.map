{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/analytics.js","jsforce-api-analytics.min.js","node_modules/lodash/isFunction.js","node_modules/lodash/isObject.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Analytics","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","isFunction","ReportInstance","report","id","_report","_conn","prototype","retrieve","callback","conn","url","_baseUrl","join","request","thenCall","Report","describe","explain","run","exec","execute","options","details","params","method","metadata","headers","Content-Type","body","JSON","stringify","executeAsync","instance","instances","reports","on","analytics","lodash/isFunction","2","value","tag","isObject","objectToString","funcTag","genTag","objectProto","Object","toString","./isObject","3","type"],"mappings":"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","file":"jsforce-api-analytics.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @file Manages Salesforce Analytics API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar isFunction = require('lodash/isFunction'),\r\n    jsforce = window.jsforce.require('./core'),\r\n    Promise  = window.jsforce.require('./promise');\r\n\r\n/**\r\n * Report instance to retrieving asynchronously executed result\r\n *\r\n * @protected\r\n * @class Analytics~ReportInstance\r\n * @param {Analytics~Report} report - Report\r\n * @param {String} id - Report instance id\r\n */\r\nvar ReportInstance = function(report, id) {\r\n  this._report = report;\r\n  this._conn = report._conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Retrieve report result asynchronously executed\r\n *\r\n * @method Analytics~ReportInstance#retrieve\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReportInstance.prototype.retrieve = function(callback) {\r\n  var conn = this._conn,\r\n      report = this._report;\r\n  var url = [ conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id ].join('/');\r\n  return conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Report object in Analytics API\r\n *\r\n * @protected\r\n * @class Analytics~Report\r\n * @param {Connection} conn Connection\r\n */\r\nvar Report = function(conn, id) {\r\n  this._conn = conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Describe report metadata\r\n *\r\n * @method Analytics~Report#describe\r\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportMetadata>}\r\n */\r\nReport.prototype.describe = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Explain plan for executing report\r\n *\r\n * @method Analytics~Report#explain\r\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\r\n * @returns {Promise.<ExplainInfo>}\r\n */\r\nReport.prototype.explain = function(callback) {\r\n  var url = \"/query/?explain=\" + this.id;\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report synchronously\r\n *\r\n * @method Analytics~Report#execute\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype.run =\r\nReport.prototype.exec =\r\nReport.prototype.execute = function(options, callback) {\r\n  options = options || {};\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\r\n  url += \"?includeDetails=\" + (options.details ? \"true\" : \"false\");\r\n  var params = { method : options.metadata ? 'POST' : 'GET', url : url };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report asynchronously\r\n *\r\n * @method Analytics~Report#executeAsync\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\r\n */\r\nReport.prototype.executeAsync = function(options, callback) {\r\n  options = options || {};\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  if (options.details) {\r\n    url += \"?includeDetails=true\";\r\n  }\r\n  var params = { method : 'POST', url : url, body: \"\" };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get report instance for specified instance ID\r\n *\r\n * @method Analytics~Report#instance\r\n * @param {String} id - Report instance ID\r\n * @returns {Analytics~ReportInstance}\r\n */\r\nReport.prototype.instance = function(id) {\r\n  return new ReportInstance(this, id);\r\n};\r\n\r\n/**\r\n * List report instances which had been executed asynchronously\r\n *\r\n * @method Analytics~Report#instances\r\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\r\n */\r\nReport.prototype.instances = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * API class for Analytics API\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Analytics = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Get report object of Analytics API\r\n *\r\n * @param {String} id - Report Id\r\n * @returns {Analytics~Report}\r\n */\r\nAnalytics.prototype.report = function(id) {\r\n  return new Report(this._conn, id);\r\n};\r\n\r\n/**\r\n * Get recent report list\r\n *\r\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\r\n */\r\nAnalytics.prototype.reports = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.analytics = new Analytics(conn);\r\n});\r\n\r\n\r\nmodule.exports = Analytics;\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Analytics = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * @file Manages Salesforce Analytics API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar isFunction = require('lodash/isFunction'),\r\n    jsforce = window.jsforce.require('./core'),\r\n    Promise  = window.jsforce.require('./promise');\r\n\r\n/**\r\n * Report instance to retrieving asynchronously executed result\r\n *\r\n * @protected\r\n * @class Analytics~ReportInstance\r\n * @param {Analytics~Report} report - Report\r\n * @param {String} id - Report instance id\r\n */\r\nvar ReportInstance = function(report, id) {\r\n  this._report = report;\r\n  this._conn = report._conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Retrieve report result asynchronously executed\r\n *\r\n * @method Analytics~ReportInstance#retrieve\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReportInstance.prototype.retrieve = function(callback) {\r\n  var conn = this._conn,\r\n      report = this._report;\r\n  var url = [ conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id ].join('/');\r\n  return conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Report object in Analytics API\r\n *\r\n * @protected\r\n * @class Analytics~Report\r\n * @param {Connection} conn Connection\r\n */\r\nvar Report = function(conn, id) {\r\n  this._conn = conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Describe report metadata\r\n *\r\n * @method Analytics~Report#describe\r\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportMetadata>}\r\n */\r\nReport.prototype.describe = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Explain plan for executing report\r\n *\r\n * @method Analytics~Report#explain\r\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\r\n * @returns {Promise.<ExplainInfo>}\r\n */\r\nReport.prototype.explain = function(callback) {\r\n  var url = \"/query/?explain=\" + this.id;\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report synchronously\r\n *\r\n * @method Analytics~Report#execute\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype.run =\r\nReport.prototype.exec =\r\nReport.prototype.execute = function(options, callback) {\r\n  options = options || {};\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\r\n  url += \"?includeDetails=\" + (options.details ? \"true\" : \"false\");\r\n  var params = { method : options.metadata ? 'POST' : 'GET', url : url };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report asynchronously\r\n *\r\n * @method Analytics~Report#executeAsync\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\r\n */\r\nReport.prototype.executeAsync = function(options, callback) {\r\n  options = options || {};\r\n  if (isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  if (options.details) {\r\n    url += \"?includeDetails=true\";\r\n  }\r\n  var params = { method : 'POST', url : url, body: \"\" };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get report instance for specified instance ID\r\n *\r\n * @method Analytics~Report#instance\r\n * @param {String} id - Report instance ID\r\n * @returns {Analytics~ReportInstance}\r\n */\r\nReport.prototype.instance = function(id) {\r\n  return new ReportInstance(this, id);\r\n};\r\n\r\n/**\r\n * List report instances which had been executed asynchronously\r\n *\r\n * @method Analytics~Report#instances\r\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\r\n */\r\nReport.prototype.instances = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * API class for Analytics API\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Analytics = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Get report object of Analytics API\r\n *\r\n * @param {String} id - Report Id\r\n * @returns {Analytics~Report}\r\n */\r\nAnalytics.prototype.report = function(id) {\r\n  return new Report(this._conn, id);\r\n};\r\n\r\n/**\r\n * Get recent report list\r\n *\r\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\r\n */\r\nAnalytics.prototype.reports = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.analytics = new Analytics(conn);\r\n});\r\n\r\n\r\nmodule.exports = Analytics;\r\n\n},{\"lodash/isFunction\":2}],2:[function(require,module,exports){\nvar isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array and weak map constructors,\n  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\nmodule.exports = isFunction;\n\n},{\"./isObject\":3}],3:[function(require,module,exports){\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n},{}]},{},[1])(1)\n});\n\n","var isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified,\n *  else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8 which returns 'object' for typed array and weak map constructors,\n  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\nmodule.exports = isFunction;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n"],"sourceRoot":"/source/"}