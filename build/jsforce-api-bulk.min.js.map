{"version":3,"sources":["node_modules/browser-pack/_prelude.js","jsforce-api-bulk.min.js","lib/api/bulk.js","node_modules/base64-js/lib/b64.js","node_modules/buffer-shims/index.js","node_modules/buffer/index.js","node_modules/core-util-is/lib/util.js","node_modules/events/events.js","node_modules/ieee754/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/isarray/index.js","node_modules/multistream/index.js","node_modules/process-nextick-args/index.js","node_modules/process/browser.js","node_modules/readable-stream/lib/_stream_duplex.js","node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-stream/lib/_stream_readable.js","node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-stream/readable.js","node_modules/string_decoder/index.js","node_modules/util-deprecate/browser.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Bulk","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","process","inherits","stream","Duplex","events","_","RecordStream","Promise","HttpApi","joinStreams","Job","bulk","type","operation","options","jobId","_bulk","id","state","_batches","EventEmitter","prototype","info","callback","_jobInfo","check","thenCall","open","_logger","toLowerCase","body","extIdField","concurrencyMode","assignmentRuleId","join","_request","method","path","headers","Content-Type","responseType","then","res","emit","jobInfo","err","createBatch","batch","Batch","on","batchId","logger","_waitAssign","debug","object","resolve","list","batchInfoList","batchInfo","isArray","close","_changeState","abort","job","super_","objectMode","_deferred","defer","_setupDataStreams","Writable","converterOptions","nullValue","_uploadStream","Serializable","_uploadDataStream","_downloadStream","Parsable","_downloadDataStream","end","once","pipe","_createRequestStream","dataStream","_dataStream","_write","data","enc","cb","write","read","push","_read","size","chunk","record","clone","Id","attributes","run","exec","execute","input","_result","rdeferred","promise","reject","isObject","isFunction","forEach","isString","onResolved","onReject","onProgress","nextTick","poll","interval","timeout","startTime","Date","getTime","now","name","parseInt","numberRecordsProcessed","retrieve","stateMessage","setTimeout","results","_conn","result","map","ret","success","Success","errors","fail","resultId","resultStream","resultDataStream","BulkApi","apply","arguments","beforeSend","request","accessToken","isSessionExpired","response","statusCode","test","hasErrorInResponseBody","error","parseError","errorCode","exceptionCode","message","exceptionMessage","conn","pollInterval","pollTimeout","baseUrl","instanceUrl","version","url","load","constructor","Object","createJob","cleanup","cleanupOnError","query","soql","m","replace","match","recordStream","streams","_process","multistream","2","init","len","lookup","revLookup","charCodeAt","toByteArray","b64","j","tmp","placeHolders","arr","Arr","L","tripletToBase64","num","encodeChunk","uint8","start","output","fromByteArray","extraBytes","parts","maxChunkLength","len2","Uint8Array","Array","3","4","buffer","Buffer","SlowBuffer","MAX_LEN","kMaxLength","alloc","fill","encoding","TypeError","RangeError","_fill","undefined","buf","fillBuf","flen","allocUnsafe","from","value","encodingOrOffset","ArrayBuffer","offset","byteLength","slice","isBuffer","out","copy","allocUnsafeSlow","5","typedArraySupport","foo","subarray","TYPED_ARRAY_SUPPORT","createBuffer","that","__proto__","arg","fromArrayBuffer","fromString","fromObject","assertSize","checked","string","isEncoding","fromArrayLike","array","byteOffset","obj","isnan","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","swap","b","arrayIndexOf","val","indexSize","readUInt16BE","arrLength","valLength","String","foundIndex","hexWrite","Number","remaining","strLen","parsed","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","Math","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","byteArray","c","hi","lo","src","dst","INSPECT_MAX_BYTES","poolSize","_augment","Symbol","species","defineProperty","configurable","_isBuffer","compare","x","y","concat","pos","swap16","swap32","equals","inspect","target","thisStart","thisEnd","thisCopy","targetCopy","indexOf","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","base64-js","isarray","6","objectToString","isBoolean","isNull","isNullOrUndefined","isNumber","isSymbol","isUndefined","isRegExp","re","isDate","d","isError","isPrimitive","../../is-buffer/index.js","7","_events","_maxListeners","defaultMaxListeners","setMaxListeners","er","handler","args","listeners","addListener","listener","newListener","warned","console","trace","removeListener","fired","position","splice","removeAllListeners","key","listenerCount","evlistener","emitter","8","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","9","create","ctor","superCtor","enumerable","writable","TempCtor","10","11","12","MultiStream","opts","Readable","destroyed","_drained","_forwarding","_current","_queue","toStreams2","_next","_readableState","wrap","destroy","bind","highWaterMark","_forward","_gotNextStream","shift","onReadable","onClose","ended","onEnd","onError","readable-stream","13","fn","arg1","arg2","arg3","14","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","cachedSetTimeout","cachedClearTimeout","Item","fun","noop","clearTimeout","title","browser","env","argv","versions","off","binding","cwd","chdir","dir","umask","15","readable","allowHalfOpen","onend","_writableState","processNextTick","onEndNT","objectKeys","keys","util","v","./_stream_readable","./_stream_writable","core-util-is","process-nextick-args","16","PassThrough","Transform","_transform","./_stream_transform","17","prependListener","event","hasPrependListener","unshift","ReadableState","readableObjectMode","hwm","defaultHwm","pipes","pipesCount","flowing","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","ranOut","awaitDrain","readingMore","decoder","StringDecoder","Stream","readableAddChunk","addToFront","chunkInvalid","onEofChunk","_e","skipAdd","emitReadable","maybeReadMore","needMoreData","computeNewHighWaterMark","MAX_HWM","howMuchToRead","emitReadable_","flow","maybeReadMore_","pipeOnDrain","EElistenerCount","nReadingNextTick","resume","resume_","fromList","stringMode","bufferShim","_buf","cpy","endReadable","endReadableNT","xs","EE","debugUtil","debuglog","isPaused","setEncoding","nOrig","doRead","dest","pipeOpts","onunpipe","onclose","onfinish","ondrain","onerror","ondata","cleanedUp","needDrain","pause","unpipe","doEnd","stdout","stderr","endFn","dests","_i","ev","paused","_fromList","./_stream_duplex","buffer-shims","string_decoder/","18","TransformState","afterTransform","needTransform","transforming","writecb","writechunk","writeencoding","ts","_transformState","rs","transform","flush","_flush","done","ws","19","nop","WriteReq","next","WritableState","writableObjectMode","ending","finished","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","CorkedRequest","writev","_writev","writeAfterEnd","validChunk","valid","decodeChunk","writeOrBuffer","last","doWrite","onwriteError","onwriteStateUpdate","needFinish","clearBuffer","asyncWrite","afterWrite","onwriteDrain","finishMaybe","entry","holder","count","finish","prefinish","need","endWritable","_this","setImmediate","internalUtil","deprecate","getBuffer","current","get","cork","uncork","setDefaultEncoding","util-deprecate","20","READABLE_STREAM","./lib/_stream_duplex.js","./lib/_stream_passthrough.js","./lib/_stream_readable.js","./lib/_stream_transform.js","./lib/_stream_writable.js","21","assertEncoding","isBufferEncoding","passThroughWrite","utf16DetectIncompleteChar","charReceived","charLength","base64DetectIncompleteChar","surrogateSize","detectIncompleteChar","charBuffer","charStr","available","charCode","substring","cr","22","msg","deprecated","config","warn","localStorage"],"mappings":"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","file":"jsforce-api-bulk.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Bulk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process){\n/*global process*/\r\n/**\r\n * @file Manages Salesforce Bulk API related operations\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits     = window.jsforce.require('inherits'),\r\n    stream       = window.jsforce.require('readable-stream'),\r\n    Duplex       = stream.Duplex,\r\n    events       = window.jsforce.require('events'),\r\n    _            = window.jsforce.require('lodash/core'),\r\n    jsforce      = window.jsforce.require('./core'),\r\n    RecordStream = window.jsforce.require('./record-stream'),\r\n    CSV          = window.jsforce.require('./csv'),\r\n    Promise      = window.jsforce.require('./promise'),\r\n    HttpApi      = window.jsforce.require('./http-api'),\r\n    joinStreams  = require('multistream');\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Class for Bulk API Job\r\n *\r\n * @protected\r\n * @class Bulk~Job\r\n * @extends events.EventEmitter\r\n *\r\n * @param {Bulk} bulk - Bulk API object\r\n * @param {String} [type] - SObject type\r\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\r\n * @param {String} [jobId] - Job ID (if already available)\r\n */\r\nvar Job = function(bulk, type, operation, options, jobId) {\r\n  this._bulk = bulk;\r\n  this.type = type;\r\n  this.operation = operation;\r\n  this.options = options || {};\r\n  this.id = jobId;\r\n  this.state = this.id ? 'Open' : 'Unknown';\r\n  this._batches = {};\r\n};\r\n\r\ninherits(Job, events.EventEmitter);\r\n\r\n/**\r\n * @typedef {Object} Bulk~JobInfo\r\n * @prop {String} id - Job ID\r\n * @prop {String} object - Object type name\r\n * @prop {String} operation - Operation type of the job\r\n * @prop {String} state - Job status\r\n */\r\n\r\n/**\r\n * Return latest jobInfo from cache\r\n *\r\n * @method Bulk~Job#open\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.info = function(callback) {\r\n  var self = this;\r\n  // if cache is not available, check the latest\r\n  if (!this._jobInfo) {\r\n    this._jobInfo = this.check();\r\n  }\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Open new job and get jobinfo\r\n *\r\n * @method Bulk~Job#open\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.open = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  // if not requested opening job\r\n  if (!this._jobInfo) {\r\n    var operation = this.operation.toLowerCase();\r\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\r\n    var body = [\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\r\n        '<operation>' + operation + '</operation>',\r\n        '<object>' + this.type + '</object>',\r\n        (this.options.extIdField ?\r\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\r\n         ''),\r\n        (this.options.concurrencyMode ?\r\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\r\n         ''),\r\n        (this.options.assignmentRuleId ?\r\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\r\n          ''),\r\n        '<contentType>CSV</contentType>',\r\n      '</jobInfo>'\r\n    ].join('');\r\n\r\n    this._jobInfo = bulk._request({\r\n      method : 'POST',\r\n      path : \"/job\",\r\n      body : body,\r\n      headers : {\r\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\r\n      },\r\n      responseType: \"application/xml\"\r\n    }).then(function(res) {\r\n      self.emit(\"open\", res.jobInfo);\r\n      self.id = res.jobInfo.id;\r\n      self.state = res.jobInfo.state;\r\n      return res.jobInfo;\r\n    }, function(err) {\r\n      self.emit(\"error\", err);\r\n      throw err;\r\n    });\r\n  }\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create a new batch instance in the job\r\n *\r\n * @method Bulk~Job#createBatch\r\n * @returns {Bulk~Batch}\r\n */\r\nJob.prototype.createBatch = function() {\r\n  var batch = new Batch(this);\r\n  var self = this;\r\n  batch.on('queue', function() {\r\n    self._batches[batch.id] = batch;\r\n  });\r\n  return batch;\r\n};\r\n\r\n/**\r\n * Get a batch instance specified by given batch ID\r\n *\r\n * @method Bulk~Job#batch\r\n * @param {String} batchId - Batch ID\r\n * @returns {Bulk~Batch}\r\n */\r\nJob.prototype.batch = function(batchId) {\r\n  var batch = this._batches[batchId];\r\n  if (!batch) {\r\n    batch = new Batch(this, batchId);\r\n    this._batches[batchId] = batch;\r\n  }\r\n  return batch;\r\n};\r\n\r\n/**\r\n * Check the latest job status from server\r\n *\r\n * @method Bulk~Job#check\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.check = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  this._jobInfo = this._waitAssign().then(function() {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + self.id,\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.jobInfo);\r\n    self.id = res.jobInfo.id;\r\n    self.type = res.jobInfo.object;\r\n    self.operation = res.jobInfo.operation;\r\n    self.state = res.jobInfo.state;\r\n    return res.jobInfo;\r\n  });\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Wait till the job is assigned to server\r\n *\r\n * @method Bulk~Job#info\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype._waitAssign = function(callback) {\r\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * List all registered batch info in job\r\n *\r\n * @method Bulk~Job#list\r\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\r\n */\r\nJob.prototype.list = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  return this._waitAssign().then(function() {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + self.id + \"/batch\",\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.batchInfoList.batchInfo);\r\n    var batchInfoList = res.batchInfoList;\r\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\r\n    return batchInfoList;\r\n  }).thenCall(callback);\r\n\r\n};\r\n\r\n/**\r\n * Close opened job\r\n *\r\n * @method Bulk~Job#close\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.close = function() {\r\n  var self = this;\r\n  return this._changeState(\"Closed\").then(function(jobInfo) {\r\n    self.id = null;\r\n    self.emit(\"close\", jobInfo);\r\n    return jobInfo;\r\n  }, function(err) {\r\n    self.emit(\"error\", err);\r\n    throw err;\r\n  });\r\n};\r\n\r\n/**\r\n * Set the status to abort\r\n *\r\n * @method Bulk~Job#abort\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.abort = function() {\r\n  var self = this;\r\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\r\n    self.id = null;\r\n    self.emit(\"abort\", jobInfo);\r\n    return jobInfo;\r\n  }, function(err) {\r\n    self.emit(\"error\", err);\r\n    throw err;\r\n  });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nJob.prototype._changeState = function(state, callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  this._jobInfo = this._waitAssign().then(function() {\r\n    var body = [\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\r\n        '<state>' + state + '</state>',\r\n      '</jobInfo>'\r\n    ].join('');\r\n    return bulk._request({\r\n      method : 'POST',\r\n      path : \"/job/\" + self.id,\r\n      body : body,\r\n      headers : {\r\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\r\n      },\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.jobInfo);\r\n    self.state = res.jobInfo.state;\r\n    return res.jobInfo;\r\n  });\r\n  return this._jobInfo.thenCall(callback);\r\n\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Batch (extends RecordStream)\r\n *\r\n * @protected\r\n * @class Bulk~Batch\r\n * @extends {stream.Writable}\r\n * @implements {Promise.<Array.<RecordResult>>}\r\n * @param {Bulk~Job} job - Bulk job object\r\n * @param {String} [batchId] - Batch ID (if already available)\r\n */\r\nvar Batch = function(job, batchId) {\r\n  Batch.super_.call(this, { objectMode: true });\r\n  this.job = job;\r\n  this.id = batchId;\r\n  this._bulk = job._bulk;\r\n  this._deferred = Promise.defer();\r\n  this._setupDataStreams();\r\n};\r\n\r\ninherits(Batch, stream.Writable);\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nBatch.prototype._setupDataStreams = function() {\r\n  var batch = this;\r\n  var converterOptions = { nullValue : '#N/A' };\r\n  this._uploadStream = new RecordStream.Serializable();\r\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\r\n  this._downloadStream = new RecordStream.Parsable();\r\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\r\n\r\n  this.on('finish', function() {\r\n    batch._uploadStream.end();\r\n  });\r\n  this._uploadDataStream.once('readable', function() {\r\n    batch.job.open().then(function() {\r\n      // pipe upload data to batch API request stream\r\n      batch._uploadDataStream.pipe(batch._createRequestStream());\r\n    });\r\n  });\r\n\r\n  // duplex data stream, opened access to API programmers by Batch#stream()\r\n  var dataStream = this._dataStream = new Duplex();\r\n  dataStream._write = function(data, enc, cb) {\r\n    batch._uploadDataStream.write(data, enc, cb);\r\n  };\r\n  dataStream.on('finish', function() {\r\n    batch._uploadDataStream.end();\r\n  });\r\n\r\n  this._downloadDataStream.on('readable', function() {\r\n    dataStream.read(0);\r\n  });\r\n  this._downloadDataStream.on('end', function() {\r\n    dataStream.push(null);\r\n  });\r\n  dataStream._read = function(size) {\r\n    var chunk;\r\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\r\n      dataStream.push(chunk);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Connect batch API and create stream instance of request/response\r\n *\r\n * @private\r\n * @returns {stream.Duplex}\r\n */\r\nBatch.prototype._createRequestStream = function() {\r\n  var batch = this;\r\n  var bulk = batch._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  return bulk._request({\r\n    method : 'POST',\r\n    path : \"/job/\" + batch.job.id + \"/batch\",\r\n    headers: {\r\n      \"Content-Type\": \"text/csv\"\r\n    },\r\n    responseType: \"application/xml\"\r\n  }, function(err, res) {\r\n    if (err) {\r\n      batch.emit('error', err);\r\n    } else {\r\n      logger.debug(res.batchInfo);\r\n      batch.id = res.batchInfo.id;\r\n      batch.emit('queue', res.batchInfo);\r\n    }\r\n  }).stream();\r\n};\r\n\r\n/**\r\n * Implementation of Writable\r\n *\r\n * @override\r\n * @private\r\n */\r\nBatch.prototype._write = function(record, enc, cb) {\r\n  record = _.clone(record);\r\n  if (this.job.operation === \"insert\") {\r\n    delete record.Id;\r\n  } else if (this.job.operation === \"delete\") {\r\n    record = { Id: record.Id };\r\n  }\r\n  delete record.type;\r\n  delete record.attributes;\r\n  this._uploadStream.write(record, enc, cb);\r\n};\r\n\r\n/**\r\n * Returns duplex stream which accepts CSV data input and batch result output\r\n *\r\n * @returns {stream.Duplex}\r\n */\r\nBatch.prototype.stream = function() {\r\n  return this._dataStream;\r\n};\r\n\r\n/**\r\n * Execute batch operation\r\n *\r\n * @method Bulk~Batch#execute\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\r\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nBatch.prototype.run =\r\nBatch.prototype.exec =\r\nBatch.prototype.execute = function(input, callback) {\r\n  var self = this;\r\n\r\n  if (typeof input === 'function') { // if input argument is omitted\r\n    callback = input;\r\n    input = null;\r\n  }\r\n\r\n  // if batch is already executed\r\n  if (this._result) {\r\n    throw new Error(\"Batch already executed.\");\r\n  }\r\n\r\n  var rdeferred = Promise.defer();\r\n  this._result = rdeferred.promise;\r\n  this._result.then(function(res) {\r\n    self._deferred.resolve(res);\r\n  }, function(err) {\r\n    self._deferred.reject(err);\r\n  });\r\n  this.once('response', function(res) {\r\n    rdeferred.resolve(res);\r\n  });\r\n  this.once('error', function(err) {\r\n    rdeferred.reject(err);\r\n  });\r\n\r\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\r\n    input.pipe(this._dataStream);\r\n  } else {\r\n    var data;\r\n    if (_.isArray(input)) {\r\n      _.forEach(input, function(record) { self.write(record); });\r\n      self.end();\r\n    } else if (_.isString(input)){\r\n      data = input;\r\n      this._dataStream.write(data, 'utf8');\r\n      this._dataStream.end();\r\n    }\r\n  }\r\n\r\n  // return Batch instance for chaining\r\n  return this.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Bulk~Batch#then\r\n */\r\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\r\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Bulk~Batch#thenCall\r\n */\r\nBatch.prototype.thenCall = function(callback) {\r\n  if (_.isFunction(callback)) {\r\n    this.then(function(res) {\r\n      process.nextTick(function() {\r\n        callback(null, res);\r\n      });\r\n    }, function(err) {\r\n      process.nextTick(function() {\r\n        callback(err);\r\n      });\r\n    });\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Bulk~BatchInfo\r\n * @prop {String} id - Batch ID\r\n * @prop {String} jobId - Job ID\r\n * @prop {String} state - Batch state\r\n * @prop {String} stateMessage - Batch state message\r\n */\r\n\r\n/**\r\n * Check the latest batch status in server\r\n *\r\n * @method Bulk~Batch#check\r\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~BatchInfo>}\r\n */\r\nBatch.prototype.check = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  return bulk._request({\r\n    method : 'GET',\r\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\r\n    responseType: \"application/xml\"\r\n  }).then(function(res) {\r\n    logger.debug(res.batchInfo);\r\n    return res.batchInfo;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Polling the batch result and retrieve\r\n *\r\n * @method Bulk~Batch#poll\r\n * @param {Number} interval - Polling interval in milliseconds\r\n * @param {Number} timeout - Polling timeout in milliseconds\r\n */\r\nBatch.prototype.poll = function(interval, timeout) {\r\n  var self = this;\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  var startTime = new Date().getTime();\r\n  var poll = function() {\r\n    var now = new Date().getTime();\r\n    if (startTime + timeout < now) {\r\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\r\n      err.name = 'PollingTimeout';\r\n      self.emit('error', err);\r\n      return;\r\n    }\r\n    self.check(function(err, res) {\r\n      if (err) {\r\n        self.emit('error', err);\r\n      } else {\r\n        if (res.state === \"Failed\") {\r\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\r\n            self.retrieve();\r\n          } else {\r\n            self.emit('error', new Error(res.stateMessage));\r\n          }\r\n        } else if (res.state === \"Completed\") {\r\n          self.retrieve();\r\n        } else {\r\n          self.emit('progress', res);\r\n          setTimeout(poll, interval);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  setTimeout(poll, interval);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Bulk~BatchResultInfo\r\n * @prop {String} id - Batch result ID\r\n * @prop {String} batchId - Batch ID which includes this batch result.\r\n * @prop {String} jobId - Job ID which includes this batch result.\r\n */\r\n\r\n/**\r\n * Retrieve batch result\r\n *\r\n * @method Bulk~Batch#retrieve\r\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\r\n */\r\nBatch.prototype.retrieve = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var jobId = this.job.id;\r\n  var job = this.job;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n\r\n  return job.info().then(function(jobInfo) {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\r\n    });\r\n  }).then(function(res) {\r\n    var results;\r\n    if (job.operation === 'query') {\r\n      var conn = bulk._conn;\r\n      var resultIds = res['result-list'].result;\r\n      results = res['result-list'].result;\r\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\r\n        return {\r\n          id: id,\r\n          batchId: batchId,\r\n          jobId: jobId\r\n        };\r\n      });\r\n    } else {\r\n      results = _.map(res, function(ret) {\r\n        return {\r\n          id: ret.Id || null,\r\n          success: ret.Success === \"true\",\r\n          errors: ret.Error ? [ ret.Error ] : []\r\n        };\r\n      });\r\n    }\r\n    self.emit('response', results);\r\n    return results;\r\n  }).fail(function(err) {\r\n    self.emit('error', err);\r\n    throw err;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Fetch query result as a record stream\r\n * @param {String} resultId - Result id\r\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\r\n */\r\nBatch.prototype.result = function(resultId) {\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  var resultStream = new RecordStream.Parsable();\r\n  var resultDataStream = resultStream.stream('csv');\r\n  var reqStream = this._bulk._request({\r\n    method : 'GET',\r\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId\r\n  }).stream().pipe(resultDataStream);\r\n  return resultStream;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * @private\r\n */\r\nvar BulkApi = function() {\r\n  BulkApi.super_.apply(this, arguments);\r\n};\r\n\r\ninherits(BulkApi, HttpApi);\r\n\r\nBulkApi.prototype.beforeSend = function(request) {\r\n  request.headers = request.headers || {};\r\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\r\n};\r\n\r\nBulkApi.prototype.isSessionExpired = function(response) {\r\n  return response.statusCode === 400 &&\r\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\r\n};\r\n\r\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\r\n  return !!body.error;\r\n};\r\n\r\nBulkApi.prototype.parseError = function(body) {\r\n  return {\r\n    errorCode: body.error.exceptionCode,\r\n    message: body.error.exceptionMessage\r\n  };\r\n};\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Class for Bulk API\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Bulk = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n};\r\n\r\n/**\r\n * Polling interval in milliseconds\r\n * @type {Number}\r\n */\r\nBulk.prototype.pollInterval = 1000;\r\n\r\n/**\r\n * Polling timeout in milliseconds\r\n * @type {Number}\r\n */\r\nBulk.prototype.pollTimeout = 10000;\r\n\r\n/** @private **/\r\nBulk.prototype._request = function(request, callback) {\r\n  var conn = this._conn;\r\n  request = _.clone(request);\r\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\r\n  request.url = baseUrl + request.path;\r\n  var options = { responseType: request.responseType };\r\n  delete request.path;\r\n  delete request.responseType;\r\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create and start bulkload job and batch\r\n *\r\n * @param {String} type - SObject type\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\r\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nBulk.prototype.load = function(type, operation, options, input, callback) {\r\n  var self = this;\r\n  if (!type || !operation) {\r\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\r\n  }\r\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\r\n    callback = input;\r\n    input = options;\r\n    options = null;\r\n  }\r\n  var job = this.createJob(type, operation, options);\r\n  job.once('error', function (error) {\r\n    if (batch) {\r\n      batch.emit('error', error); // pass job error to batch\r\n    }\r\n  });\r\n  var batch = job.createBatch();\r\n  var cleanup = function() {\r\n    batch = null;\r\n    job.close();\r\n  };\r\n  var cleanupOnError = function(err) {\r\n    if (err.name !== 'PollingTimeout') {\r\n      cleanup();\r\n    }\r\n  };\r\n  batch.on('response', cleanup);\r\n  batch.on('error', cleanupOnError);\r\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\r\n  return batch.execute(input, callback);\r\n};\r\n\r\n/**\r\n * Execute bulk query and get record stream\r\n *\r\n * @param {String} soql - SOQL to execute in bulk job\r\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\r\n */\r\nBulk.prototype.query = function(soql) {\r\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\r\n  if (!m) {\r\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\r\n  }\r\n  var type = m[1];\r\n  var self = this;\r\n  var recordStream = new RecordStream.Parsable();\r\n  var dataStream = recordStream.stream('csv');\r\n  this.load(type, \"query\", soql).then(function(results) {\r\n    var streams = results.map(function(result) {\r\n      return self\r\n        .job(result.jobId)\r\n        .batch(result.batchId)\r\n        .result(result.id)\r\n        .stream();\r\n    });\r\n\r\n    joinStreams(streams).pipe(dataStream);\r\n  }).fail(function(err) {\r\n    recordStream.emit('error', err);\r\n  });\r\n  return recordStream;\r\n};\r\n\r\n\r\n/**\r\n * Create a new job instance\r\n *\r\n * @param {String} type - SObject type\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @returns {Bulk~Job}\r\n */\r\nBulk.prototype.createJob = function(type, operation, options) {\r\n  return new Job(this, type, operation, options);\r\n};\r\n\r\n/**\r\n * Get a job instance specified by given job ID\r\n *\r\n * @param {String} jobId - Job ID\r\n * @returns {Bulk~Job}\r\n */\r\nBulk.prototype.job = function(jobId) {\r\n  return new Job(this, null, null, null, jobId);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.bulk = new Bulk(conn);\r\n});\r\n\r\n\r\nmodule.exports = Bulk;\r\n\n}).call(this,require('_process'))\n\n},{\"_process\":14,\"multistream\":12}],2:[function(require,module,exports){\n'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n},{}],3:[function(require,module,exports){\n\n},{}],4:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar buffer = require('buffer');\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar MAX_LEN = buffer.kMaxLength || 2147483647;\nexports.alloc = function alloc(size, fill, encoding) {\n  if (typeof Buffer.alloc === 'function') {\n    return Buffer.alloc(size, fill, encoding);\n  }\n  if (typeof encoding === 'number') {\n    throw new TypeError('encoding must not be number');\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  var enc = encoding;\n  var _fill = fill;\n  if (_fill === undefined) {\n    enc = undefined;\n    _fill = 0;\n  }\n  var buf = new Buffer(size);\n  if (typeof _fill === 'string') {\n    var fillBuf = new Buffer(_fill, enc);\n    var flen = fillBuf.length;\n    var i = -1;\n    while (++i < size) {\n      buf[i] = fillBuf[i % flen];\n    }\n  } else {\n    buf.fill(_fill);\n  }\n  return buf;\n}\nexports.allocUnsafe = function allocUnsafe(size) {\n  if (typeof Buffer.allocUnsafe === 'function') {\n    return Buffer.allocUnsafe(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new Buffer(size);\n}\nexports.from = function from(value, encodingOrOffset, length) {\n  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n    return Buffer.from(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n  if (typeof value === 'string') {\n    return new Buffer(value, encodingOrOffset);\n  }\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    var offset = encodingOrOffset;\n    if (arguments.length === 1) {\n      return new Buffer(value);\n    }\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    var len = length;\n    if (typeof len === 'undefined') {\n      len = value.byteLength - offset;\n    }\n    if (offset >= value.byteLength) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n    if (len > value.byteLength - offset) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n    return new Buffer(value.slice(offset, offset + len));\n  }\n  if (Buffer.isBuffer(value)) {\n    var out = new Buffer(value.length);\n    value.copy(out, 0, 0, value.length);\n    return out;\n  }\n  if (value) {\n    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {\n      return new Buffer(value);\n    }\n    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n      return new Buffer(value.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n}\nexports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n  if (typeof Buffer.allocUnsafeSlow === 'function') {\n    return Buffer.allocUnsafeSlow(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size >= MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new SlowBuffer(size);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"buffer\":5}],5:[function(require,module,exports){\n(function (global){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var foundIndex = -1\n  for (var i = 0; byteOffset + i < arrLength; i++) {\n    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n      if (foundIndex === -1) foundIndex = i\n      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize\n    } else {\n      if (foundIndex !== -1) i -= i - foundIndex\n      foundIndex = -1\n    }\n  }\n  return -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    // special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(this, val, byteOffset, encoding)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset, encoding)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; i++) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"base64-js\":2,\"ieee754\":8,\"isarray\":11}],6:[function(require,module,exports){\n(function (Buffer){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n}).call(this,{\"isBuffer\":require(\"../../is-buffer/index.js\")})\n\n},{\"../../is-buffer/index.js\":10}],7:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n},{}],8:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],9:[function(require,module,exports){\nif (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n},{}],10:[function(require,module,exports){\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n * `npm install is-buffer`\n */\n\nmodule.exports = function (obj) {\n  return !!(obj != null &&\n    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n      (obj.constructor &&\n      typeof obj.constructor.isBuffer === 'function' &&\n      obj.constructor.isBuffer(obj))\n    ))\n}\n\n},{}],11:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],12:[function(require,module,exports){\nmodule.exports = MultiStream\n\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\ninherits(MultiStream, stream.Readable)\n\nfunction MultiStream (streams, opts) {\n  if (!(this instanceof MultiStream)) return new MultiStream(streams, opts)\n  stream.Readable.call(this, opts)\n\n  this.destroyed = false\n\n  this._drained = false\n  this._forwarding = false\n  this._current = null\n  this._queue = (typeof streams === 'function' ? streams : streams.map(toStreams2))\n\n  this._next()\n}\n\nMultiStream.obj = function (streams) {\n  return new MultiStream(streams, { objectMode: true, highWaterMark: 16 })\n}\n\nMultiStream.prototype._read = function () {\n  this._drained = true\n  this._forward()\n}\n\nMultiStream.prototype._forward = function () {\n  if (this._forwarding || !this._drained || !this._current) return\n  this._forwarding = true\n\n  var chunk\n  while ((chunk = this._current.read()) !== null) {\n    this._drained = this.push(chunk)\n  }\n\n  this._forwarding = false\n}\n\nMultiStream.prototype.destroy = function (err) {\n  if (this.destroyed) return\n  this.destroyed = true\n\n  if (this._current && this._current.destroy) this._current.destroy()\n  if (typeof this._queue !== 'function') {\n    this._queue.forEach(function (stream) {\n      if (stream.destroy) stream.destroy()\n    })\n  }\n\n  if (err) this.emit('error', err)\n  this.emit('close')\n}\n\nMultiStream.prototype._next = function () {\n  var self = this\n  self._current = null\n\n  if (typeof self._queue === 'function') {\n    self._queue(function (err, stream) {\n      if (err) return self.destroy(err)\n      self._gotNextStream(toStreams2(stream))\n    })\n  } else {\n    var stream = self._queue.shift()\n    if (typeof stream === 'function') stream = toStreams2(stream())\n    self._gotNextStream(stream)\n  }\n}\n\nMultiStream.prototype._gotNextStream = function (stream) {\n  var self = this\n\n  if (!stream) {\n    self.push(null)\n    self.destroy()\n    return\n  }\n\n  self._current = stream\n  self._forward()\n\n  stream.on('readable', onReadable)\n  stream.on('end', onEnd)\n  stream.on('error', onError)\n  stream.on('close', onClose)\n\n  function onReadable () {\n    self._forward()\n  }\n\n  function onClose () {\n    if (!stream._readableState.ended) {\n      self.destroy()\n    }\n  }\n\n  function onEnd () {\n    self._current = null\n    stream.removeListener('readable', onReadable)\n    stream.removeListener('end', onEnd)\n    stream.removeListener('error', onError)\n    stream.removeListener('close', onClose)\n    self._next()\n  }\n\n  function onError (err) {\n    self.destroy(err)\n  }\n}\n\nfunction toStreams2 (s) {\n  if (!s || typeof s === 'function' || s._readableState) return s\n\n  var wrap = new stream.Readable().wrap(s)\n  if (s.destroy) {\n    wrap.destroy = s.destroy.bind(s)\n  }\n  return wrap\n}\n\n},{\"inherits\":9,\"readable-stream\":20}],13:[function(require,module,exports){\n(function (process){\n'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n}).call(this,require('_process'))\n\n},{\"_process\":14}],14:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],15:[function(require,module,exports){\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n},{\"./_stream_readable\":17,\"./_stream_writable\":19,\"core-util-is\":6,\"inherits\":9,\"process-nextick-args\":13}],16:[function(require,module,exports){\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};\n},{\"./_stream_transform\":18,\"core-util-is\":6,\"inherits\":9}],17:[function(require,module,exports){\n(function (process){\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar hasPrependListener = typeof EE.prototype.prependListener === 'function';\n\nfunction prependListener(emitter, event, fn) {\n  if (hasPrependListener) return emitter.prependListener(event, fn);\n\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS. This is here\n  // only because this code needs to continue to work with older versions\n  // of Node.js that do not include the prependListener() method. The goal\n  // is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = bufferShim.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = bufferShim.allocUnsafe(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var _buf = list[0];\n        var cpy = Math.min(n - c, _buf.length);\n\n        if (stringMode) ret += _buf.slice(0, cpy);else _buf.copy(ret, c, 0, cpy);\n\n        if (cpy < _buf.length) list[0] = _buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}\n}).call(this,require('_process'))\n\n},{\"./_stream_duplex\":15,\"_process\":14,\"buffer\":5,\"buffer-shims\":4,\"core-util-is\":6,\"events\":7,\"inherits\":9,\"isarray\":11,\"process-nextick-args\":13,\"string_decoder/\":21,\"util\":3}],18:[function(require,module,exports){\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('Not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}\n},{\"./_stream_duplex\":15,\"core-util-is\":6,\"inherits\":9}],19:[function(require,module,exports){\n(function (process){\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nvar Duplex;\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\nvar Duplex;\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = bufferShim.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}\n}).call(this,require('_process'))\n\n},{\"./_stream_duplex\":15,\"_process\":14,\"buffer\":5,\"buffer-shims\":4,\"core-util-is\":6,\"events\":7,\"inherits\":9,\"process-nextick-args\":13,\"util-deprecate\":22}],20:[function(require,module,exports){\n(function (process){\nvar Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n\n}).call(this,require('_process'))\n\n},{\"./lib/_stream_duplex.js\":15,\"./lib/_stream_passthrough.js\":16,\"./lib/_stream_readable.js\":17,\"./lib/_stream_transform.js\":18,\"./lib/_stream_writable.js\":19,\"_process\":14}],21:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n\n},{\"buffer\":5}],22:[function(require,module,exports){\n(function (global){\n\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}]},{},[1])(1)\n});\n\n","/*global process*/\r\n/**\r\n * @file Manages Salesforce Bulk API related operations\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits     = window.jsforce.require('inherits'),\r\n    stream       = window.jsforce.require('readable-stream'),\r\n    Duplex       = stream.Duplex,\r\n    events       = window.jsforce.require('events'),\r\n    _            = window.jsforce.require('lodash/core'),\r\n    jsforce      = window.jsforce.require('./core'),\r\n    RecordStream = window.jsforce.require('./record-stream'),\r\n    CSV          = window.jsforce.require('./csv'),\r\n    Promise      = window.jsforce.require('./promise'),\r\n    HttpApi      = window.jsforce.require('./http-api'),\r\n    joinStreams  = require('multistream');\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Class for Bulk API Job\r\n *\r\n * @protected\r\n * @class Bulk~Job\r\n * @extends events.EventEmitter\r\n *\r\n * @param {Bulk} bulk - Bulk API object\r\n * @param {String} [type] - SObject type\r\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\r\n * @param {String} [jobId] - Job ID (if already available)\r\n */\r\nvar Job = function(bulk, type, operation, options, jobId) {\r\n  this._bulk = bulk;\r\n  this.type = type;\r\n  this.operation = operation;\r\n  this.options = options || {};\r\n  this.id = jobId;\r\n  this.state = this.id ? 'Open' : 'Unknown';\r\n  this._batches = {};\r\n};\r\n\r\ninherits(Job, events.EventEmitter);\r\n\r\n/**\r\n * @typedef {Object} Bulk~JobInfo\r\n * @prop {String} id - Job ID\r\n * @prop {String} object - Object type name\r\n * @prop {String} operation - Operation type of the job\r\n * @prop {String} state - Job status\r\n */\r\n\r\n/**\r\n * Return latest jobInfo from cache\r\n *\r\n * @method Bulk~Job#open\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.info = function(callback) {\r\n  var self = this;\r\n  // if cache is not available, check the latest\r\n  if (!this._jobInfo) {\r\n    this._jobInfo = this.check();\r\n  }\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Open new job and get jobinfo\r\n *\r\n * @method Bulk~Job#open\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.open = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  // if not requested opening job\r\n  if (!this._jobInfo) {\r\n    var operation = this.operation.toLowerCase();\r\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\r\n    var body = [\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\r\n        '<operation>' + operation + '</operation>',\r\n        '<object>' + this.type + '</object>',\r\n        (this.options.extIdField ?\r\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\r\n         ''),\r\n        (this.options.concurrencyMode ?\r\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\r\n         ''),\r\n        (this.options.assignmentRuleId ?\r\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\r\n          ''),\r\n        '<contentType>CSV</contentType>',\r\n      '</jobInfo>'\r\n    ].join('');\r\n\r\n    this._jobInfo = bulk._request({\r\n      method : 'POST',\r\n      path : \"/job\",\r\n      body : body,\r\n      headers : {\r\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\r\n      },\r\n      responseType: \"application/xml\"\r\n    }).then(function(res) {\r\n      self.emit(\"open\", res.jobInfo);\r\n      self.id = res.jobInfo.id;\r\n      self.state = res.jobInfo.state;\r\n      return res.jobInfo;\r\n    }, function(err) {\r\n      self.emit(\"error\", err);\r\n      throw err;\r\n    });\r\n  }\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create a new batch instance in the job\r\n *\r\n * @method Bulk~Job#createBatch\r\n * @returns {Bulk~Batch}\r\n */\r\nJob.prototype.createBatch = function() {\r\n  var batch = new Batch(this);\r\n  var self = this;\r\n  batch.on('queue', function() {\r\n    self._batches[batch.id] = batch;\r\n  });\r\n  return batch;\r\n};\r\n\r\n/**\r\n * Get a batch instance specified by given batch ID\r\n *\r\n * @method Bulk~Job#batch\r\n * @param {String} batchId - Batch ID\r\n * @returns {Bulk~Batch}\r\n */\r\nJob.prototype.batch = function(batchId) {\r\n  var batch = this._batches[batchId];\r\n  if (!batch) {\r\n    batch = new Batch(this, batchId);\r\n    this._batches[batchId] = batch;\r\n  }\r\n  return batch;\r\n};\r\n\r\n/**\r\n * Check the latest job status from server\r\n *\r\n * @method Bulk~Job#check\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.check = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  this._jobInfo = this._waitAssign().then(function() {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + self.id,\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.jobInfo);\r\n    self.id = res.jobInfo.id;\r\n    self.type = res.jobInfo.object;\r\n    self.operation = res.jobInfo.operation;\r\n    self.state = res.jobInfo.state;\r\n    return res.jobInfo;\r\n  });\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Wait till the job is assigned to server\r\n *\r\n * @method Bulk~Job#info\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype._waitAssign = function(callback) {\r\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * List all registered batch info in job\r\n *\r\n * @method Bulk~Job#list\r\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\r\n */\r\nJob.prototype.list = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  return this._waitAssign().then(function() {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + self.id + \"/batch\",\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.batchInfoList.batchInfo);\r\n    var batchInfoList = res.batchInfoList;\r\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\r\n    return batchInfoList;\r\n  }).thenCall(callback);\r\n\r\n};\r\n\r\n/**\r\n * Close opened job\r\n *\r\n * @method Bulk~Job#close\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.close = function() {\r\n  var self = this;\r\n  return this._changeState(\"Closed\").then(function(jobInfo) {\r\n    self.id = null;\r\n    self.emit(\"close\", jobInfo);\r\n    return jobInfo;\r\n  }, function(err) {\r\n    self.emit(\"error\", err);\r\n    throw err;\r\n  });\r\n};\r\n\r\n/**\r\n * Set the status to abort\r\n *\r\n * @method Bulk~Job#abort\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.abort = function() {\r\n  var self = this;\r\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\r\n    self.id = null;\r\n    self.emit(\"abort\", jobInfo);\r\n    return jobInfo;\r\n  }, function(err) {\r\n    self.emit(\"error\", err);\r\n    throw err;\r\n  });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nJob.prototype._changeState = function(state, callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  this._jobInfo = this._waitAssign().then(function() {\r\n    var body = [\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\r\n        '<state>' + state + '</state>',\r\n      '</jobInfo>'\r\n    ].join('');\r\n    return bulk._request({\r\n      method : 'POST',\r\n      path : \"/job/\" + self.id,\r\n      body : body,\r\n      headers : {\r\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\r\n      },\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.jobInfo);\r\n    self.state = res.jobInfo.state;\r\n    return res.jobInfo;\r\n  });\r\n  return this._jobInfo.thenCall(callback);\r\n\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Batch (extends RecordStream)\r\n *\r\n * @protected\r\n * @class Bulk~Batch\r\n * @extends {stream.Writable}\r\n * @implements {Promise.<Array.<RecordResult>>}\r\n * @param {Bulk~Job} job - Bulk job object\r\n * @param {String} [batchId] - Batch ID (if already available)\r\n */\r\nvar Batch = function(job, batchId) {\r\n  Batch.super_.call(this, { objectMode: true });\r\n  this.job = job;\r\n  this.id = batchId;\r\n  this._bulk = job._bulk;\r\n  this._deferred = Promise.defer();\r\n  this._setupDataStreams();\r\n};\r\n\r\ninherits(Batch, stream.Writable);\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nBatch.prototype._setupDataStreams = function() {\r\n  var batch = this;\r\n  var converterOptions = { nullValue : '#N/A' };\r\n  this._uploadStream = new RecordStream.Serializable();\r\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\r\n  this._downloadStream = new RecordStream.Parsable();\r\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\r\n\r\n  this.on('finish', function() {\r\n    batch._uploadStream.end();\r\n  });\r\n  this._uploadDataStream.once('readable', function() {\r\n    batch.job.open().then(function() {\r\n      // pipe upload data to batch API request stream\r\n      batch._uploadDataStream.pipe(batch._createRequestStream());\r\n    });\r\n  });\r\n\r\n  // duplex data stream, opened access to API programmers by Batch#stream()\r\n  var dataStream = this._dataStream = new Duplex();\r\n  dataStream._write = function(data, enc, cb) {\r\n    batch._uploadDataStream.write(data, enc, cb);\r\n  };\r\n  dataStream.on('finish', function() {\r\n    batch._uploadDataStream.end();\r\n  });\r\n\r\n  this._downloadDataStream.on('readable', function() {\r\n    dataStream.read(0);\r\n  });\r\n  this._downloadDataStream.on('end', function() {\r\n    dataStream.push(null);\r\n  });\r\n  dataStream._read = function(size) {\r\n    var chunk;\r\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\r\n      dataStream.push(chunk);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Connect batch API and create stream instance of request/response\r\n *\r\n * @private\r\n * @returns {stream.Duplex}\r\n */\r\nBatch.prototype._createRequestStream = function() {\r\n  var batch = this;\r\n  var bulk = batch._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  return bulk._request({\r\n    method : 'POST',\r\n    path : \"/job/\" + batch.job.id + \"/batch\",\r\n    headers: {\r\n      \"Content-Type\": \"text/csv\"\r\n    },\r\n    responseType: \"application/xml\"\r\n  }, function(err, res) {\r\n    if (err) {\r\n      batch.emit('error', err);\r\n    } else {\r\n      logger.debug(res.batchInfo);\r\n      batch.id = res.batchInfo.id;\r\n      batch.emit('queue', res.batchInfo);\r\n    }\r\n  }).stream();\r\n};\r\n\r\n/**\r\n * Implementation of Writable\r\n *\r\n * @override\r\n * @private\r\n */\r\nBatch.prototype._write = function(record, enc, cb) {\r\n  record = _.clone(record);\r\n  if (this.job.operation === \"insert\") {\r\n    delete record.Id;\r\n  } else if (this.job.operation === \"delete\") {\r\n    record = { Id: record.Id };\r\n  }\r\n  delete record.type;\r\n  delete record.attributes;\r\n  this._uploadStream.write(record, enc, cb);\r\n};\r\n\r\n/**\r\n * Returns duplex stream which accepts CSV data input and batch result output\r\n *\r\n * @returns {stream.Duplex}\r\n */\r\nBatch.prototype.stream = function() {\r\n  return this._dataStream;\r\n};\r\n\r\n/**\r\n * Execute batch operation\r\n *\r\n * @method Bulk~Batch#execute\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\r\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nBatch.prototype.run =\r\nBatch.prototype.exec =\r\nBatch.prototype.execute = function(input, callback) {\r\n  var self = this;\r\n\r\n  if (typeof input === 'function') { // if input argument is omitted\r\n    callback = input;\r\n    input = null;\r\n  }\r\n\r\n  // if batch is already executed\r\n  if (this._result) {\r\n    throw new Error(\"Batch already executed.\");\r\n  }\r\n\r\n  var rdeferred = Promise.defer();\r\n  this._result = rdeferred.promise;\r\n  this._result.then(function(res) {\r\n    self._deferred.resolve(res);\r\n  }, function(err) {\r\n    self._deferred.reject(err);\r\n  });\r\n  this.once('response', function(res) {\r\n    rdeferred.resolve(res);\r\n  });\r\n  this.once('error', function(err) {\r\n    rdeferred.reject(err);\r\n  });\r\n\r\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\r\n    input.pipe(this._dataStream);\r\n  } else {\r\n    var data;\r\n    if (_.isArray(input)) {\r\n      _.forEach(input, function(record) { self.write(record); });\r\n      self.end();\r\n    } else if (_.isString(input)){\r\n      data = input;\r\n      this._dataStream.write(data, 'utf8');\r\n      this._dataStream.end();\r\n    }\r\n  }\r\n\r\n  // return Batch instance for chaining\r\n  return this.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Bulk~Batch#then\r\n */\r\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\r\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Bulk~Batch#thenCall\r\n */\r\nBatch.prototype.thenCall = function(callback) {\r\n  if (_.isFunction(callback)) {\r\n    this.then(function(res) {\r\n      process.nextTick(function() {\r\n        callback(null, res);\r\n      });\r\n    }, function(err) {\r\n      process.nextTick(function() {\r\n        callback(err);\r\n      });\r\n    });\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Bulk~BatchInfo\r\n * @prop {String} id - Batch ID\r\n * @prop {String} jobId - Job ID\r\n * @prop {String} state - Batch state\r\n * @prop {String} stateMessage - Batch state message\r\n */\r\n\r\n/**\r\n * Check the latest batch status in server\r\n *\r\n * @method Bulk~Batch#check\r\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~BatchInfo>}\r\n */\r\nBatch.prototype.check = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  return bulk._request({\r\n    method : 'GET',\r\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\r\n    responseType: \"application/xml\"\r\n  }).then(function(res) {\r\n    logger.debug(res.batchInfo);\r\n    return res.batchInfo;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Polling the batch result and retrieve\r\n *\r\n * @method Bulk~Batch#poll\r\n * @param {Number} interval - Polling interval in milliseconds\r\n * @param {Number} timeout - Polling timeout in milliseconds\r\n */\r\nBatch.prototype.poll = function(interval, timeout) {\r\n  var self = this;\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  var startTime = new Date().getTime();\r\n  var poll = function() {\r\n    var now = new Date().getTime();\r\n    if (startTime + timeout < now) {\r\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\r\n      err.name = 'PollingTimeout';\r\n      self.emit('error', err);\r\n      return;\r\n    }\r\n    self.check(function(err, res) {\r\n      if (err) {\r\n        self.emit('error', err);\r\n      } else {\r\n        if (res.state === \"Failed\") {\r\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\r\n            self.retrieve();\r\n          } else {\r\n            self.emit('error', new Error(res.stateMessage));\r\n          }\r\n        } else if (res.state === \"Completed\") {\r\n          self.retrieve();\r\n        } else {\r\n          self.emit('progress', res);\r\n          setTimeout(poll, interval);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  setTimeout(poll, interval);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Bulk~BatchResultInfo\r\n * @prop {String} id - Batch result ID\r\n * @prop {String} batchId - Batch ID which includes this batch result.\r\n * @prop {String} jobId - Job ID which includes this batch result.\r\n */\r\n\r\n/**\r\n * Retrieve batch result\r\n *\r\n * @method Bulk~Batch#retrieve\r\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\r\n */\r\nBatch.prototype.retrieve = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var jobId = this.job.id;\r\n  var job = this.job;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n\r\n  return job.info().then(function(jobInfo) {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\r\n    });\r\n  }).then(function(res) {\r\n    var results;\r\n    if (job.operation === 'query') {\r\n      var conn = bulk._conn;\r\n      var resultIds = res['result-list'].result;\r\n      results = res['result-list'].result;\r\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\r\n        return {\r\n          id: id,\r\n          batchId: batchId,\r\n          jobId: jobId\r\n        };\r\n      });\r\n    } else {\r\n      results = _.map(res, function(ret) {\r\n        return {\r\n          id: ret.Id || null,\r\n          success: ret.Success === \"true\",\r\n          errors: ret.Error ? [ ret.Error ] : []\r\n        };\r\n      });\r\n    }\r\n    self.emit('response', results);\r\n    return results;\r\n  }).fail(function(err) {\r\n    self.emit('error', err);\r\n    throw err;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Fetch query result as a record stream\r\n * @param {String} resultId - Result id\r\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\r\n */\r\nBatch.prototype.result = function(resultId) {\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  var resultStream = new RecordStream.Parsable();\r\n  var resultDataStream = resultStream.stream('csv');\r\n  var reqStream = this._bulk._request({\r\n    method : 'GET',\r\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId\r\n  }).stream().pipe(resultDataStream);\r\n  return resultStream;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * @private\r\n */\r\nvar BulkApi = function() {\r\n  BulkApi.super_.apply(this, arguments);\r\n};\r\n\r\ninherits(BulkApi, HttpApi);\r\n\r\nBulkApi.prototype.beforeSend = function(request) {\r\n  request.headers = request.headers || {};\r\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\r\n};\r\n\r\nBulkApi.prototype.isSessionExpired = function(response) {\r\n  return response.statusCode === 400 &&\r\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\r\n};\r\n\r\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\r\n  return !!body.error;\r\n};\r\n\r\nBulkApi.prototype.parseError = function(body) {\r\n  return {\r\n    errorCode: body.error.exceptionCode,\r\n    message: body.error.exceptionMessage\r\n  };\r\n};\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Class for Bulk API\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Bulk = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n};\r\n\r\n/**\r\n * Polling interval in milliseconds\r\n * @type {Number}\r\n */\r\nBulk.prototype.pollInterval = 1000;\r\n\r\n/**\r\n * Polling timeout in milliseconds\r\n * @type {Number}\r\n */\r\nBulk.prototype.pollTimeout = 10000;\r\n\r\n/** @private **/\r\nBulk.prototype._request = function(request, callback) {\r\n  var conn = this._conn;\r\n  request = _.clone(request);\r\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\r\n  request.url = baseUrl + request.path;\r\n  var options = { responseType: request.responseType };\r\n  delete request.path;\r\n  delete request.responseType;\r\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create and start bulkload job and batch\r\n *\r\n * @param {String} type - SObject type\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\r\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nBulk.prototype.load = function(type, operation, options, input, callback) {\r\n  var self = this;\r\n  if (!type || !operation) {\r\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\r\n  }\r\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\r\n    callback = input;\r\n    input = options;\r\n    options = null;\r\n  }\r\n  var job = this.createJob(type, operation, options);\r\n  job.once('error', function (error) {\r\n    if (batch) {\r\n      batch.emit('error', error); // pass job error to batch\r\n    }\r\n  });\r\n  var batch = job.createBatch();\r\n  var cleanup = function() {\r\n    batch = null;\r\n    job.close();\r\n  };\r\n  var cleanupOnError = function(err) {\r\n    if (err.name !== 'PollingTimeout') {\r\n      cleanup();\r\n    }\r\n  };\r\n  batch.on('response', cleanup);\r\n  batch.on('error', cleanupOnError);\r\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\r\n  return batch.execute(input, callback);\r\n};\r\n\r\n/**\r\n * Execute bulk query and get record stream\r\n *\r\n * @param {String} soql - SOQL to execute in bulk job\r\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\r\n */\r\nBulk.prototype.query = function(soql) {\r\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\r\n  if (!m) {\r\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\r\n  }\r\n  var type = m[1];\r\n  var self = this;\r\n  var recordStream = new RecordStream.Parsable();\r\n  var dataStream = recordStream.stream('csv');\r\n  this.load(type, \"query\", soql).then(function(results) {\r\n    var streams = results.map(function(result) {\r\n      return self\r\n        .job(result.jobId)\r\n        .batch(result.batchId)\r\n        .result(result.id)\r\n        .stream();\r\n    });\r\n\r\n    joinStreams(streams).pipe(dataStream);\r\n  }).fail(function(err) {\r\n    recordStream.emit('error', err);\r\n  });\r\n  return recordStream;\r\n};\r\n\r\n\r\n/**\r\n * Create a new job instance\r\n *\r\n * @param {String} type - SObject type\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @returns {Bulk~Job}\r\n */\r\nBulk.prototype.createJob = function(type, operation, options) {\r\n  return new Job(this, type, operation, options);\r\n};\r\n\r\n/**\r\n * Get a job instance specified by given job ID\r\n *\r\n * @param {String} jobId - Job ID\r\n * @returns {Bulk~Job}\r\n */\r\nBulk.prototype.job = function(jobId) {\r\n  return new Job(this, null, null, null, jobId);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.bulk = new Bulk(conn);\r\n});\r\n\r\n\r\nmodule.exports = Bulk;\r\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","'use strict';\n\nvar buffer = require('buffer');\nvar Buffer = buffer.Buffer;\nvar SlowBuffer = buffer.SlowBuffer;\nvar MAX_LEN = buffer.kMaxLength || 2147483647;\nexports.alloc = function alloc(size, fill, encoding) {\n  if (typeof Buffer.alloc === 'function') {\n    return Buffer.alloc(size, fill, encoding);\n  }\n  if (typeof encoding === 'number') {\n    throw new TypeError('encoding must not be number');\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  var enc = encoding;\n  var _fill = fill;\n  if (_fill === undefined) {\n    enc = undefined;\n    _fill = 0;\n  }\n  var buf = new Buffer(size);\n  if (typeof _fill === 'string') {\n    var fillBuf = new Buffer(_fill, enc);\n    var flen = fillBuf.length;\n    var i = -1;\n    while (++i < size) {\n      buf[i] = fillBuf[i % flen];\n    }\n  } else {\n    buf.fill(_fill);\n  }\n  return buf;\n}\nexports.allocUnsafe = function allocUnsafe(size) {\n  if (typeof Buffer.allocUnsafe === 'function') {\n    return Buffer.allocUnsafe(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size > MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new Buffer(size);\n}\nexports.from = function from(value, encodingOrOffset, length) {\n  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {\n    return Buffer.from(value, encodingOrOffset, length);\n  }\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number');\n  }\n  if (typeof value === 'string') {\n    return new Buffer(value, encodingOrOffset);\n  }\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    var offset = encodingOrOffset;\n    if (arguments.length === 1) {\n      return new Buffer(value);\n    }\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    var len = length;\n    if (typeof len === 'undefined') {\n      len = value.byteLength - offset;\n    }\n    if (offset >= value.byteLength) {\n      throw new RangeError('\\'offset\\' is out of bounds');\n    }\n    if (len > value.byteLength - offset) {\n      throw new RangeError('\\'length\\' is out of bounds');\n    }\n    return new Buffer(value.slice(offset, offset + len));\n  }\n  if (Buffer.isBuffer(value)) {\n    var out = new Buffer(value.length);\n    value.copy(out, 0, 0, value.length);\n    return out;\n  }\n  if (value) {\n    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {\n      return new Buffer(value);\n    }\n    if (value.type === 'Buffer' && Array.isArray(value.data)) {\n      return new Buffer(value.data);\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');\n}\nexports.allocUnsafeSlow = function allocUnsafeSlow(size) {\n  if (typeof Buffer.allocUnsafeSlow === 'function') {\n    return Buffer.allocUnsafeSlow(size);\n  }\n  if (typeof size !== 'number') {\n    throw new TypeError('size must be a number');\n  }\n  if (size >= MAX_LEN) {\n    throw new RangeError('size is too large');\n  }\n  return new SlowBuffer(size);\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var foundIndex = -1\n  for (var i = 0; byteOffset + i < arrLength; i++) {\n    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n      if (foundIndex === -1) foundIndex = i\n      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize\n    } else {\n      if (foundIndex !== -1) i -= i - foundIndex\n      foundIndex = -1\n    }\n  }\n  return -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    // special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(this, val, byteOffset, encoding)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset, encoding)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; i++) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n * `npm install is-buffer`\n */\n\nmodule.exports = function (obj) {\n  return !!(obj != null &&\n    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n      (obj.constructor &&\n      typeof obj.constructor.isBuffer === 'function' &&\n      obj.constructor.isBuffer(obj))\n    ))\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","module.exports = MultiStream\n\nvar inherits = require('inherits')\nvar stream = require('readable-stream')\n\ninherits(MultiStream, stream.Readable)\n\nfunction MultiStream (streams, opts) {\n  if (!(this instanceof MultiStream)) return new MultiStream(streams, opts)\n  stream.Readable.call(this, opts)\n\n  this.destroyed = false\n\n  this._drained = false\n  this._forwarding = false\n  this._current = null\n  this._queue = (typeof streams === 'function' ? streams : streams.map(toStreams2))\n\n  this._next()\n}\n\nMultiStream.obj = function (streams) {\n  return new MultiStream(streams, { objectMode: true, highWaterMark: 16 })\n}\n\nMultiStream.prototype._read = function () {\n  this._drained = true\n  this._forward()\n}\n\nMultiStream.prototype._forward = function () {\n  if (this._forwarding || !this._drained || !this._current) return\n  this._forwarding = true\n\n  var chunk\n  while ((chunk = this._current.read()) !== null) {\n    this._drained = this.push(chunk)\n  }\n\n  this._forwarding = false\n}\n\nMultiStream.prototype.destroy = function (err) {\n  if (this.destroyed) return\n  this.destroyed = true\n\n  if (this._current && this._current.destroy) this._current.destroy()\n  if (typeof this._queue !== 'function') {\n    this._queue.forEach(function (stream) {\n      if (stream.destroy) stream.destroy()\n    })\n  }\n\n  if (err) this.emit('error', err)\n  this.emit('close')\n}\n\nMultiStream.prototype._next = function () {\n  var self = this\n  self._current = null\n\n  if (typeof self._queue === 'function') {\n    self._queue(function (err, stream) {\n      if (err) return self.destroy(err)\n      self._gotNextStream(toStreams2(stream))\n    })\n  } else {\n    var stream = self._queue.shift()\n    if (typeof stream === 'function') stream = toStreams2(stream())\n    self._gotNextStream(stream)\n  }\n}\n\nMultiStream.prototype._gotNextStream = function (stream) {\n  var self = this\n\n  if (!stream) {\n    self.push(null)\n    self.destroy()\n    return\n  }\n\n  self._current = stream\n  self._forward()\n\n  stream.on('readable', onReadable)\n  stream.on('end', onEnd)\n  stream.on('error', onError)\n  stream.on('close', onClose)\n\n  function onReadable () {\n    self._forward()\n  }\n\n  function onClose () {\n    if (!stream._readableState.ended) {\n      self.destroy()\n    }\n  }\n\n  function onEnd () {\n    self._current = null\n    stream.removeListener('readable', onReadable)\n    stream.removeListener('end', onEnd)\n    stream.removeListener('error', onError)\n    stream.removeListener('close', onClose)\n    self._next()\n  }\n\n  function onError (err) {\n    self.destroy(err)\n  }\n}\n\nfunction toStreams2 (s) {\n  if (!s || typeof s === 'function' || s._readableState) return s\n\n  var wrap = new stream.Readable().wrap(s)\n  if (s.destroy) {\n    wrap.destroy = s.destroy.bind(s)\n  }\n  return wrap\n}\n","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = nextTick;\n} else {\n  module.exports = process.nextTick;\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n","// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\nvar keys = objectKeys(Writable.prototype);\nfor (var v = 0; v < keys.length; v++) {\n  var method = keys[v];\n  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  processNextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}","// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar hasPrependListener = typeof EE.prototype.prependListener === 'function';\n\nfunction prependListener(emitter, event, fn) {\n  if (hasPrependListener) return emitter.prependListener(event, fn);\n\n  // This is a brutally ugly hack to make sure that our error handler\n  // is attached before any userland ones.  NEVER DO THIS. This is here\n  // only because this code needs to continue to work with older versions\n  // of Node.js that do not include the prependListener() method. The goal\n  // is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nvar Duplex;\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.buffer = [];\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // when piping, we only care about 'readable' events that happen\n  // after read()ing all the bytes and not getting any pushback.\n  this.ranOut = false;\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nvar Duplex;\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options && typeof options.read === 'function') this._read = options.read;\n\n  Stream.call(this);\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n\n  if (!state.objectMode && typeof chunk === 'string') {\n    encoding = encoding || state.defaultEncoding;\n    if (encoding !== state.encoding) {\n      chunk = bufferShim.from(chunk, encoding);\n      encoding = '';\n    }\n  }\n\n  return readableAddChunk(this, state, chunk, encoding, false);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  var state = this._readableState;\n  return readableAddChunk(this, state, chunk, '', true);\n};\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n  var er = chunkInvalid(state, chunk);\n  if (er) {\n    stream.emit('error', er);\n  } else if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else if (state.objectMode || chunk && chunk.length > 0) {\n    if (state.ended && !addToFront) {\n      var e = new Error('stream.push() after EOF');\n      stream.emit('error', e);\n    } else if (state.endEmitted && addToFront) {\n      var _e = new Error('stream.unshift() after end event');\n      stream.emit('error', _e);\n    } else {\n      var skipAdd;\n      if (state.decoder && !addToFront && !encoding) {\n        chunk = state.decoder.write(chunk);\n        skipAdd = !state.objectMode && chunk.length === 0;\n      }\n\n      if (!addToFront) state.reading = false;\n\n      // Don't add to the buffer if we've decoded to an empty string chunk and\n      // we're not in object mode\n      if (!skipAdd) {\n        // if we want the data now, just emit it.\n        if (state.flowing && state.length === 0 && !state.sync) {\n          stream.emit('data', chunk);\n          stream.read(0);\n        } else {\n          // update the buffer info.\n          state.length += state.objectMode ? 1 : chunk.length;\n          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n          if (state.needReadable) emitReadable(stream);\n        }\n      }\n\n      maybeReadMore(stream, state);\n    }\n  } else if (!addToFront) {\n    state.reading = false;\n  }\n\n  return needMoreData(state);\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\nfunction howMuchToRead(n, state) {\n  if (state.length === 0 && state.ended) return 0;\n\n  if (state.objectMode) return n === 0 ? 0 : 1;\n\n  if (n === null || isNaN(n)) {\n    // only flow one buffer at a time\n    if (state.flowing && state.buffer.length) return state.buffer[0].length;else return state.length;\n  }\n\n  if (n <= 0) return 0;\n\n  // If we're asking for more than the target buffer level,\n  // then raise the water mark.  Bump up to the next highest\n  // power of 2, to prevent increasing it excessively in tiny\n  // amounts.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n\n  // don't have that much.  return null, unless we've ended.\n  if (n > state.length) {\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    } else {\n      return state.length;\n    }\n  }\n\n  return n;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (typeof n !== 'number' || n > 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  }\n\n  if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n  }\n\n  // If _read pushed data synchronously, then `reading` will be false,\n  // and we need to re-evaluate how much data we can return to the user.\n  if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  }\n\n  state.length -= n;\n\n  // If we have nothing in the buffer, then we want to know\n  // as soon as we *do* get something into the buffer.\n  if (state.length === 0 && !state.ended) state.needReadable = true;\n\n  // If we tried to read() past the EOF, then emit end on the next tick.\n  if (nOrig !== n && state.ended && state.length === 0) endReadable(this);\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction chunkInvalid(state, chunk) {\n  var er = null;\n  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    processNextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : cleanup;\n  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable) {\n    debug('onunpipe');\n    if (readable === src) {\n      cleanup();\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', cleanup);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    if (false === ret) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var _i = 0; _i < len; _i++) {\n      dests[_i].emit('unpipe', this);\n    }return this;\n  }\n\n  // try to find the right one.\n  var i = indexOf(state.pipes, dest);\n  if (i === -1) return this;\n\n  state.pipes.splice(i, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  // If listening to data, and it has not explicitly been paused,\n  // then call resume to start the flow of data on the next tick.\n  if (ev === 'data' && false !== this._readableState.flowing) {\n    this.resume();\n  }\n\n  if (ev === 'readable' && !this._readableState.endEmitted) {\n    var state = this._readableState;\n    if (!state.readableListening) {\n      state.readableListening = true;\n      state.emittedReadable = false;\n      state.needReadable = true;\n      if (!state.reading) {\n        processNextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this, state);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    processNextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  if (state.flowing) {\n    do {\n      var chunk = stream.read();\n    } while (null !== chunk && state.flowing);\n  }\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var state = this._readableState;\n  var paused = false;\n\n  var self = this;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) self.push(chunk);\n    }\n\n    self.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = self.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n  forEach(events, function (ev) {\n    stream.on(ev, self.emit.bind(self, ev));\n  });\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  self._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return self;\n};\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n  var list = state.buffer;\n  var length = state.length;\n  var stringMode = !!state.decoder;\n  var objectMode = !!state.objectMode;\n  var ret;\n\n  // nothing in the list, definitely empty.\n  if (list.length === 0) return null;\n\n  if (length === 0) ret = null;else if (objectMode) ret = list.shift();else if (!n || n >= length) {\n    // read it all, truncate the array.\n    if (stringMode) ret = list.join('');else if (list.length === 1) ret = list[0];else ret = Buffer.concat(list, length);\n    list.length = 0;\n  } else {\n    // read just some of it.\n    if (n < list[0].length) {\n      // just take a part of the first list item.\n      // slice is the same for buffers and strings.\n      var buf = list[0];\n      ret = buf.slice(0, n);\n      list[0] = buf.slice(n);\n    } else if (n === list[0].length) {\n      // first list is a perfect match\n      ret = list.shift();\n    } else {\n      // complex case.\n      // we have enough to cover it, but it spans past the first buffer.\n      if (stringMode) ret = '';else ret = bufferShim.allocUnsafe(n);\n\n      var c = 0;\n      for (var i = 0, l = list.length; i < l && c < n; i++) {\n        var _buf = list[0];\n        var cpy = Math.min(n - c, _buf.length);\n\n        if (stringMode) ret += _buf.slice(0, cpy);else _buf.copy(ret, c, 0, cpy);\n\n        if (cpy < _buf.length) list[0] = _buf.slice(cpy);else list.shift();\n\n        c += cpy;\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    processNextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction forEach(xs, f) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    f(xs[i], i);\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction TransformState(stream) {\n  this.afterTransform = function (er, data) {\n    return afterTransform(stream, er, data);\n  };\n\n  this.needTransform = false;\n  this.transforming = false;\n  this.writecb = null;\n  this.writechunk = null;\n  this.writeencoding = null;\n}\n\nfunction afterTransform(stream, er, data) {\n  var ts = stream._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data !== null && data !== undefined) stream.push(data);\n\n  cb(er);\n\n  var rs = stream._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    stream._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = new TransformState(this);\n\n  // when the writable side finishes, then flush out anything remaining.\n  var stream = this;\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  this.once('prefinish', function () {\n    if (typeof this._flush === 'function') this._flush(function (er) {\n      done(stream, er);\n    });else done(stream);\n  });\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('Not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nfunction done(stream, er) {\n  if (er) return stream.emit('error', er);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  var ws = stream._writableState;\n  var ts = stream._transformState;\n\n  if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/*<replacement>*/\nvar processNextTick = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream;\n(function () {\n  try {\n    Stream = require('st' + 'ream');\n  } catch (_) {} finally {\n    if (!Stream) Stream = require('events').EventEmitter;\n  }\n})();\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\n/*<replacement>*/\nvar bufferShim = require('buffer-shims');\n/*</replacement>*/\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\nvar Duplex;\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = ~ ~this.highWaterMark;\n\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function writableStateGetBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n  } catch (_) {}\n})();\n\nvar Duplex;\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, though they're not\n  // instanceof Writable, they're instanceof Readable.\n  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  processNextTick(cb, er);\n}\n\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n  // Always throw error if a null is written\n  // if we are not in object mode then throw\n  // if it is not a buffer, string, or undefined.\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    processNextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = bufferShim.from(chunk, encoding);\n  }\n  return chunk;\n}\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n  chunk = decodeChunk(state, chunk, encoding);\n\n  if (Buffer.isBuffer(chunk)) encoding = 'buffer';\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) processNextTick(cb, er);else cb(er);\n\n  stream._writableState.errorEmitted = true;\n  stream.emit('error', er);\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n        afterWrite(stream, state, finished, cb);\n      }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    while (entry) {\n      buffer[count] = entry;\n      entry = entry.next;\n      count += 1;\n    }\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequestCount = 0;\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished) {\n    state.prefinished = true;\n    stream.emit('prefinish');\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    if (state.pendingcb === 0) {\n      prefinish(stream, state);\n      state.finished = true;\n      stream.emit('finish');\n    } else {\n      prefinish(stream, state);\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) processNextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function (err) {\n    var entry = _this.entry;\n    _this.entry = null;\n    while (entry) {\n      var cb = entry.callback;\n      state.pendingcb--;\n      cb(err);\n      entry = entry.next;\n    }\n    if (state.corkedRequestsFree) {\n      state.corkedRequestsFree.next = _this;\n    } else {\n      state.corkedRequestsFree = _this;\n    }\n  };\n}","var Stream = (function (){\n  try {\n    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify\n  } catch(_){}\n}());\nexports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = Stream || exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n\nif (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Buffer = require('buffer').Buffer;\n\nvar isBufferEncoding = Buffer.isEncoding\n  || function(encoding) {\n       switch (encoding && encoding.toLowerCase()) {\n         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n         default: return false;\n       }\n     }\n\n\nfunction assertEncoding(encoding) {\n  if (encoding && !isBufferEncoding(encoding)) {\n    throw new Error('Unknown encoding: ' + encoding);\n  }\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n  assertEncoding(encoding);\n  switch (this.encoding) {\n    case 'utf8':\n      // CESU-8 represents each of Surrogate Pair by 3-bytes\n      this.surrogateSize = 3;\n      break;\n    case 'ucs2':\n    case 'utf16le':\n      // UTF-16 represents each of Surrogate Pair by 2-bytes\n      this.surrogateSize = 2;\n      this.detectIncompleteChar = utf16DetectIncompleteChar;\n      break;\n    case 'base64':\n      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n      this.surrogateSize = 3;\n      this.detectIncompleteChar = base64DetectIncompleteChar;\n      break;\n    default:\n      this.write = passThroughWrite;\n      return;\n  }\n\n  // Enough space to store all bytes of a single character. UTF-8 needs 4\n  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n  this.charBuffer = new Buffer(6);\n  // Number of bytes received for the current incomplete multi-byte character.\n  this.charReceived = 0;\n  // Number of bytes expected for the current incomplete multi-byte character.\n  this.charLength = 0;\n};\n\n\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n  var charStr = '';\n  // if our last write ended with an incomplete multibyte character\n  while (this.charLength) {\n    // determine how many remaining bytes this buffer has to offer for this char\n    var available = (buffer.length >= this.charLength - this.charReceived) ?\n        this.charLength - this.charReceived :\n        buffer.length;\n\n    // add the new bytes to the char buffer\n    buffer.copy(this.charBuffer, this.charReceived, 0, available);\n    this.charReceived += available;\n\n    if (this.charReceived < this.charLength) {\n      // still not enough chars in this buffer? wait for more ...\n      return '';\n    }\n\n    // remove bytes belonging to the current character from the buffer\n    buffer = buffer.slice(available, buffer.length);\n\n    // get the character that was split\n    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    var charCode = charStr.charCodeAt(charStr.length - 1);\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      this.charLength += this.surrogateSize;\n      charStr = '';\n      continue;\n    }\n    this.charReceived = this.charLength = 0;\n\n    // if there are no more bytes in this buffer, just emit our char\n    if (buffer.length === 0) {\n      return charStr;\n    }\n    break;\n  }\n\n  // determine and set charLength / charReceived\n  this.detectIncompleteChar(buffer);\n\n  var end = buffer.length;\n  if (this.charLength) {\n    // buffer the incomplete character bytes we got\n    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n    end -= this.charReceived;\n  }\n\n  charStr += buffer.toString(this.encoding, 0, end);\n\n  var end = charStr.length - 1;\n  var charCode = charStr.charCodeAt(end);\n  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n  if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n    var size = this.surrogateSize;\n    this.charLength += size;\n    this.charReceived += size;\n    this.charBuffer.copy(this.charBuffer, size, 0, size);\n    buffer.copy(this.charBuffer, 0, 0, size);\n    return charStr.substring(0, end);\n  }\n\n  // or just emit the charStr\n  return charStr;\n};\n\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n  // determine how many bytes we have to check at the end of this buffer\n  var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n  // Figure out if one of the last i bytes of our buffer announces an\n  // incomplete char.\n  for (; i > 0; i--) {\n    var c = buffer[buffer.length - i];\n\n    // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n    // 110XXXXX\n    if (i == 1 && c >> 5 == 0x06) {\n      this.charLength = 2;\n      break;\n    }\n\n    // 1110XXXX\n    if (i <= 2 && c >> 4 == 0x0E) {\n      this.charLength = 3;\n      break;\n    }\n\n    // 11110XXX\n    if (i <= 3 && c >> 3 == 0x1E) {\n      this.charLength = 4;\n      break;\n    }\n  }\n  this.charReceived = i;\n};\n\nStringDecoder.prototype.end = function(buffer) {\n  var res = '';\n  if (buffer && buffer.length)\n    res = this.write(buffer);\n\n  if (this.charReceived) {\n    var cr = this.charReceived;\n    var buf = this.charBuffer;\n    var enc = this.encoding;\n    res += buf.slice(0, cr).toString(enc);\n  }\n\n  return res;\n};\n\nfunction passThroughWrite(buffer) {\n  return buffer.toString(this.encoding);\n}\n\nfunction utf16DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 2;\n  this.charLength = this.charReceived ? 2 : 0;\n}\n\nfunction base64DetectIncompleteChar(buffer) {\n  this.charReceived = buffer.length % 3;\n  this.charLength = this.charReceived ? 3 : 0;\n}\n","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n"],"sourceRoot":"/source/"}