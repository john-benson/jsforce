{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/api/tooling.js","jsforce-api-tooling.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Tooling","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_","Cache","conn","_conn","_logger","delegates","forEach","method","constructor","prototype","cache","cacheOptions","key","type","describe$","makeCacheable","describe","makeResponseCacheable","describeSObject$","describeSObject","describeGlobal$","describeGlobal","initialize","sobjects","clear","get","on","bind","res","result","types","map","so","name","sobject","_baseUrl","request","apply","arguments","executeAnonymous","body","callback","url","encodeURIComponent","thenCall","runTestsAsynchronous","classids","join","runTestsSynchronous","classnames","completions","isString","tooling"],"mappings":"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","file":"jsforce-api-tooling.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @file Manages Tooling APIs\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar jsforce = window.jsforce.require('./core'),\r\n    _     = window.jsforce.require('lodash/core'),\r\n    Cache = window.jsforce.require('./cache');\r\n\r\n/**\r\n * API class for Tooling API call\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection\r\n */\r\nvar Tooling = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n  var delegates = [\r\n    \"query\",\r\n    \"queryMore\",\r\n    \"create\",\r\n    \"insert\",\r\n    \"retrieve\",\r\n    \"update\",\r\n    \"upsert\",\r\n    \"del\",\r\n    \"delete\",\r\n    \"destroy\",\r\n    \"describe\",\r\n    \"describeGlobal\",\r\n    \"sobject\"\r\n  ];\r\n  delegates.forEach(function(method) {\r\n    this[method] = conn.constructor.prototype[method];\r\n  }, this);\r\n\r\n  this.cache = new Cache();\r\n\r\n  var cacheOptions = {\r\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\r\n  };\r\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\r\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\r\n  this.describeSObject$ = this.describe$;\r\n  this.describeSObject = this.describe;\r\n\r\n  cacheOptions = { key: 'describeGlobal' };\r\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\r\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\r\n\r\n  this.initialize();\r\n};\r\n\r\n/**\r\n * Initialize tooling API\r\n * @protected\r\n */\r\nTooling.prototype.initialize = function() {\r\n  this.sobjects = {};\r\n  this.cache.clear();\r\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\r\n    if (res.result) {\r\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\r\n      types.forEach(this.sobject, this);\r\n    }\r\n  }, this));\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype._baseUrl = function() {\r\n  return this._conn._baseUrl() + \"/tooling\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype.request = function() {\r\n  return this._conn.request.apply(this._conn, arguments);\r\n};\r\n\r\n/**\r\n * Execute query by using SOQL\r\n *\r\n * @param {String} soql - SOQL string\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Query next record set by using query locator\r\n *\r\n * @method Tooling#query\r\n * @param {String} locator - Next record set locator\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Retrieve specified records\r\n *\r\n * @method Tooling#queryMore\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\r\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\r\n * @returns {Promise.<Record|Array.<Record>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#create()\r\n *\r\n * @method Tooling#insert\r\n * @param {String} type - SObject Type\r\n * @param {Object|Array.<Object>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Create records\r\n *\r\n * @method Tooling#create\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Update records\r\n *\r\n * @method Tooling#update\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to update\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Upsert records\r\n *\r\n * @method Tooling#upsert\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\r\n * @param {String} extIdField - External ID field name\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#delete\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#del\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete records\r\n *\r\n * @method Tooling#destroy\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#describe()\r\n *\r\n * @method Tooling#describeSObject\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n/**\r\n * Describe SObject metadata\r\n *\r\n * @method Tooling#describe\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n\r\n/**\r\n * Describe global SObjects\r\n *\r\n * @method Tooling#describeGlobal\r\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeGlobalResult>}\r\n */\r\n\r\n/**\r\n * Get SObject instance\r\n *\r\n * @method Tooling#sobject\r\n * @param {String} type - SObject Type\r\n * @returns {SObject}\r\n */\r\n\r\n/**\r\n * @typedef {Object} Tooling~ExecuteAnonymousResult\r\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\r\n * @prop {String} compileProblem - Error reason in compilation\r\n * @prop {Boolean} success - Flag if the code is executed successfully\r\n * @prop {Number} line - Line number for the error\r\n * @prop {Number} column - Column number for the error\r\n * @prop {String} exceptionMessage - Exception message\r\n * @prop {String} exceptionStackTrace - Exception stack trace\r\n */\r\n/**\r\n * Executes Apex code anonymously\r\n *\r\n * @param {String} body - Anonymous Apex code\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.executeAnonymous = function(body, callback) {\r\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests asynchronously\r\n *\r\n * @param {Array.<String>} classids - Comma separated list of class IDs\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\r\n  var url = this._baseUrl() + \"/runTestsAsynchronous/?classids=\" + classids.join(',');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests synchronously\r\n *\r\n * @param {Array.<String>} classnames - Comma separated list of class Names\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsSynchronous = function(classnames, callback) {\r\n  var url = this._baseUrl() + \"/runTestsSynchronous/?classnames=\" + classnames.join(',');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Tooling~CompletionsResult\r\n * @prop {Object} publicDeclarations\r\n */\r\n/**\r\n * Retrieves available code completions of the referenced type\r\n *\r\n * @param {String} [type] - completion type (default 'apex')\r\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~CompletionsResult>}\r\n */\r\nTooling.prototype.completions = function(type, callback) {\r\n  if (!_.isString(type)) {\r\n    callback = type;\r\n    type = 'apex';\r\n  }\r\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.tooling = new Tooling(conn);\r\n});\r\n\r\n\r\nmodule.exports = Tooling;\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Tooling = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * @file Manages Tooling APIs\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar jsforce = window.jsforce.require('./core'),\r\n    _     = window.jsforce.require('lodash/core'),\r\n    Cache = window.jsforce.require('./cache');\r\n\r\n/**\r\n * API class for Tooling API call\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection\r\n */\r\nvar Tooling = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n  var delegates = [\r\n    \"query\",\r\n    \"queryMore\",\r\n    \"create\",\r\n    \"insert\",\r\n    \"retrieve\",\r\n    \"update\",\r\n    \"upsert\",\r\n    \"del\",\r\n    \"delete\",\r\n    \"destroy\",\r\n    \"describe\",\r\n    \"describeGlobal\",\r\n    \"sobject\"\r\n  ];\r\n  delegates.forEach(function(method) {\r\n    this[method] = conn.constructor.prototype[method];\r\n  }, this);\r\n\r\n  this.cache = new Cache();\r\n\r\n  var cacheOptions = {\r\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\r\n  };\r\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\r\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\r\n  this.describeSObject$ = this.describe$;\r\n  this.describeSObject = this.describe;\r\n\r\n  cacheOptions = { key: 'describeGlobal' };\r\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\r\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\r\n\r\n  this.initialize();\r\n};\r\n\r\n/**\r\n * Initialize tooling API\r\n * @protected\r\n */\r\nTooling.prototype.initialize = function() {\r\n  this.sobjects = {};\r\n  this.cache.clear();\r\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\r\n    if (res.result) {\r\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\r\n      types.forEach(this.sobject, this);\r\n    }\r\n  }, this));\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype._baseUrl = function() {\r\n  return this._conn._baseUrl() + \"/tooling\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype.request = function() {\r\n  return this._conn.request.apply(this._conn, arguments);\r\n};\r\n\r\n/**\r\n * Execute query by using SOQL\r\n *\r\n * @param {String} soql - SOQL string\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Query next record set by using query locator\r\n *\r\n * @method Tooling#query\r\n * @param {String} locator - Next record set locator\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Retrieve specified records\r\n *\r\n * @method Tooling#queryMore\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\r\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\r\n * @returns {Promise.<Record|Array.<Record>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#create()\r\n *\r\n * @method Tooling#insert\r\n * @param {String} type - SObject Type\r\n * @param {Object|Array.<Object>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Create records\r\n *\r\n * @method Tooling#create\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Update records\r\n *\r\n * @method Tooling#update\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to update\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Upsert records\r\n *\r\n * @method Tooling#upsert\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\r\n * @param {String} extIdField - External ID field name\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#delete\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#del\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete records\r\n *\r\n * @method Tooling#destroy\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#describe()\r\n *\r\n * @method Tooling#describeSObject\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n/**\r\n * Describe SObject metadata\r\n *\r\n * @method Tooling#describe\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n\r\n/**\r\n * Describe global SObjects\r\n *\r\n * @method Tooling#describeGlobal\r\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeGlobalResult>}\r\n */\r\n\r\n/**\r\n * Get SObject instance\r\n *\r\n * @method Tooling#sobject\r\n * @param {String} type - SObject Type\r\n * @returns {SObject}\r\n */\r\n\r\n/**\r\n * @typedef {Object} Tooling~ExecuteAnonymousResult\r\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\r\n * @prop {String} compileProblem - Error reason in compilation\r\n * @prop {Boolean} success - Flag if the code is executed successfully\r\n * @prop {Number} line - Line number for the error\r\n * @prop {Number} column - Column number for the error\r\n * @prop {String} exceptionMessage - Exception message\r\n * @prop {String} exceptionStackTrace - Exception stack trace\r\n */\r\n/**\r\n * Executes Apex code anonymously\r\n *\r\n * @param {String} body - Anonymous Apex code\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.executeAnonymous = function(body, callback) {\r\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests asynchronously\r\n *\r\n * @param {Array.<String>} classids - Comma separated list of class IDs\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\r\n  var url = this._baseUrl() + \"/runTestsAsynchronous/?classids=\" + classids.join(',');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests synchronously\r\n *\r\n * @param {Array.<String>} classnames - Comma separated list of class Names\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsSynchronous = function(classnames, callback) {\r\n  var url = this._baseUrl() + \"/runTestsSynchronous/?classnames=\" + classnames.join(',');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Tooling~CompletionsResult\r\n * @prop {Object} publicDeclarations\r\n */\r\n/**\r\n * Retrieves available code completions of the referenced type\r\n *\r\n * @param {String} [type] - completion type (default 'apex')\r\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~CompletionsResult>}\r\n */\r\nTooling.prototype.completions = function(type, callback) {\r\n  if (!_.isString(type)) {\r\n    callback = type;\r\n    type = 'apex';\r\n  }\r\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.tooling = new Tooling(conn);\r\n});\r\n\r\n\r\nmodule.exports = Tooling;\r\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}