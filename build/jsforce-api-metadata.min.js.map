{"version":3,"sources":["node_modules/browser-pack/_prelude.js","jsforce-api-metadata.min.js","lib/api/metadata.js","node_modules/base64-js/lib/b64.js","node_modules/buffer/index.js","node_modules/ieee754/index.js","node_modules/isarray/index.js","node_modules/process/browser.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","jsforce","modules","api","Metadata","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","process","Buffer","convertToSaveResult","result","saveResult","_","clone","success","convertToUpsertResult","upsertResult","created","convertToMetadataInfo","rec","metadataInfo","$","inherits","events","stream","Promise","SOAP","conn","_conn","prototype","pollInterval","pollTimeout","_invoke","method","message","callback","soapEndpoint","xmlns","endpointUrl","instanceUrl","version","invoke","then","res","thenCall","createAsync","type","metadata","Number","convert","md","isArray","map","AsyncResultLocator","createSync","create","results","readSync","read","fullNames","records","updateAsync","updateMetadata","umd","updateSync","update","upsertSync","upsert","deleteAsync","isString","fullName","del","deleteSync","rename","oldFullName","newFullName","checkStatus","ids","asyncProcessId","describe","asOfVersion","metadataObjects","mo","childXmlNames","inFolder","metaFile","partialSaveAllowed","testRequired","list","queries","retrieve","request","RetrieveResultLocator","checkRetrieveStatus","id","deploy","zipInput","options","isFunction","deferred","defer","isObject","pipe","bufs","on","d","push","resolve","concat","toString","String","promise","zipContentB64","ZipFile","DeployOptions","DeployResultLocator","checkDeployStatus","includeDetails","isBoolean","done","checkOnly","ignoreWarnings","rollbackOnError","numberComponentErrors","numberComponentsDeployed","numberComponentsTotal","numberTestErrors","numberTestsCompleted","numberTestsTotal","meta","_meta","_results","_isArray","EventEmitter","onResolve","onReject","convertType","nextTick","err","check","_ids","poll","interval","timeout","startTime","Date","getTime","now","errMsg","emit","resultArr","len","setTimeout","complete","reject","super_","resultStream","Readable","reading","_read","zipFile","_process","buffer","2","init","lookup","revLookup","charCodeAt","toByteArray","b64","j","tmp","placeHolders","arr","Arr","L","tripletToBase64","num","encodeChunk","uint8","start","end","output","join","fromByteArray","extraBytes","parts","maxChunkLength","len2","Uint8Array","Array","3","typedArraySupport","foo","subarray","byteLength","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","from","value","TypeError","ArrayBuffer","fromArrayBuffer","fromString","fromObject","assertSize","size","alloc","fill","encoding","undefined","checked","string","isEncoding","write","fromArrayLike","array","byteOffset","obj","isBuffer","copy","isnan","data","SlowBuffer","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","swap","b","m","arrayIndexOf","val","buf","indexSize","readUInt16BE","arrLength","valLength","foundIndex","hexWrite","offset","remaining","strLen","parsed","parseInt","substr","isNaN","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","base64","slice","Math","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","ret","out","toHex","bytes","checkOffset","ext","checkInt","max","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","str","stringtrim","replace","INVALID_BASE64_RE","trim","units","Infinity","leadSurrogate","byteArray","c","hi","lo","src","dst","INSPECT_MAX_BYTES","poolSize","_augment","Symbol","species","Object","defineProperty","configurable","allocUnsafeSlow","_isBuffer","compare","x","y","pos","swap16","swap32","arguments","equals","inspect","match","target","thisStart","thisEnd","thisCopy","targetCopy","indexOf","includes","isFinite","toJSON","_arr","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","maxBytes","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","base64-js","isarray","4","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","log","LN2","5","6","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","cachedSetTimeout","run","cachedClearTimeout","Item","fun","noop","clearTimeout","args","title","browser","env","argv","versions","addListener","once","off","removeListener","removeAllListeners","binding","name","cwd","chdir","dir","umask"],"mappings":"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","file":"jsforce-api-metadata.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g=(g.jsforce||(g.jsforce = {}));g=(g.modules||(g.modules = {}));g=(g.api||(g.api = {}));g.Metadata = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process,Buffer){\n/*global process, Buffer */\r\n/**\r\n * @file Manages Salesforce Metadata API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = window.jsforce.require('inherits'),\r\n    events  = window.jsforce.require('events'),\r\n    stream  = window.jsforce.require('readable-stream'),\r\n    _       = window.jsforce.require('lodash/core'),\r\n    jsforce = window.jsforce.require('./core'),\r\n    Promise = window.jsforce.require('./promise'),\r\n    SOAP    = window.jsforce.require('./soap');\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * Class for Salesforce Metadata API\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Metadata = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n\r\n/**\r\n * Polling interval in milliseconds\r\n * @type {Number}\r\n */\r\nMetadata.prototype.pollInterval = 1000;\r\n\r\n/**\r\n * Polling timeout in milliseconds\r\n * @type {Number}\r\n */\r\nMetadata.prototype.pollTimeout = 10000;\r\n\r\n\r\n/**\r\n * Call Metadata API SOAP endpoint\r\n *\r\n * @private\r\n */\r\nMetadata.prototype._invoke = function(method, message, callback) {\r\n  var soapEndpoint = new SOAP(this._conn, {\r\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\r\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\r\n  });\r\n  return soapEndpoint.invoke(method, message).then(function(res) {\r\n    return res.result;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} Metadata~MetadataInfo\r\n * @prop {String} fullName - The name of the component\r\n */\r\n\r\n/**\r\n * Asynchronously adds one or more new metadata components to the organization.\r\n *\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.createAsync = function(type, metadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  var res = this._invoke(\"create\", { metadata: metadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~SaveResult\r\n * @prop {Boolean} success - True if metadata is successfully saved\r\n * @prop {String} fullName - Full name of metadata object\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToSaveResult(result) {\r\n  var saveResult = _.clone(result);\r\n  saveResult.success = saveResult.success === 'true';\r\n  return saveResult;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Metadata~UpsertResult\r\n * @prop {Boolean} success - True if metadata is successfully saved\r\n * @prop {String} fullName - Full name of metadata object\r\n * @prop {Boolean} created - True if metadata is newly created\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToUpsertResult(result) {\r\n  var upsertResult = convertToSaveResult(result);\r\n  upsertResult.created = upsertResult.created === 'true';\r\n  return upsertResult;\r\n}\r\n\r\n/**\r\n * Synonym of Metadata#create().\r\n *\r\n * @method Metadata#createSync\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n/**\r\n * Synchronously adds one or more new metadata components to the organization.\r\n *\r\n * @method Metadata#create\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.createSync =\r\nMetadata.prototype.create = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"createMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToMetadataInfo(rec) {\r\n  var metadataInfo = _.clone(rec);\r\n  delete metadataInfo.$;\r\n  return metadataInfo;\r\n}\r\n\r\n/**\r\n * Synonym of Metadata#read()\r\n *\r\n * @method Metadata#readSync\r\n * @param {String} type - The type of metadata to read\r\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\r\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\r\n */\r\n/**\r\n * Synchronously read specified metadata components in the organization.\r\n *\r\n * @method Metadata#read\r\n * @param {String} type - The type of metadata to read\r\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\r\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\r\n */\r\nMetadata.prototype.readSync =\r\nMetadata.prototype.read = function(type, fullNames, callback) {\r\n  return this._invoke(\"readMetadata\", { type: type, fullNames: fullNames }).then(function(res) {\r\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~UpdateMetadataInfo\r\n * @prop {String} currentName - The API name of the component or field before the update\r\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\r\n */\r\n\r\n/**\r\n * Asynchronously updates one or more metadata components in the organization.\r\n *\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.updateAsync = function(type, updateMetadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(umd) {\r\n    umd.metadata[\"@xsi:type\"] = type;\r\n    return umd;\r\n  };\r\n  var isArray = _.isArray(updateMetadata);\r\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\r\n  var res = this._invoke(\"update\", { updateMetadata: updateMetadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#update().\r\n *\r\n * @method Metadata#updateSync\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n/**\r\n * Synchronously updates one or more metadata components in the organization.\r\n *\r\n * @method Metadata#update\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.updateSync =\r\nMetadata.prototype.update = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"updateMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#upsert().\r\n *\r\n * @method Metadata#upsertSync\r\n * @param {String} type - The type of metadata to upsert\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\r\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\r\n */\r\n/**\r\n * Upserts one or more components in your organization's data.\r\n *\r\n * @method Metadata#upsert\r\n * @param {String} type - The type of metadata to upsert\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\r\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\r\n */\r\nMetadata.prototype.upsertSync =\r\nMetadata.prototype.upsert = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"upsertMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Asynchronously deletes specified metadata components in the organization.\r\n *\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.deleteAsync = function(type, metadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(md) {\r\n    if (_.isString(md)) {\r\n      md = { fullName : md };\r\n    }\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  var res = this._invoke(\"delete\", { metadata: metadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#delete().\r\n *\r\n * @deprecated\r\n * @method Metadata#del\r\n * @param {String} [type] - The type of metadata to delete\r\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\n/**\r\n * Synonym of Metadata#delete().\r\n *\r\n * @method Metadata#deleteSync\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n\r\n/**\r\n * Synchronously deletes specified metadata components in the organization.\r\n *\r\n * @method Metadata#delete\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.del =\r\nMetadata.prototype.deleteSync =\r\nMetadata.prototype[\"delete\"] = function(type, fullNames, callback) {\r\n  return this._invoke(\"deleteMetadata\", { type: type, fullNames: fullNames }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Rename fullname of a metadata component in the organization\r\n *\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String} oldFullName - The original fullName of metadata\r\n * @param {String} newFullName - The new fullName of metadata\r\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult>}\r\n */\r\nMetadata.prototype.rename = function(type, oldFullName, newFullName, callback) {\r\n  return this._invoke(\"renameMetadata\", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {\r\n    return convertToSaveResult(result);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of asynchronous metadata calls\r\n *\r\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.checkStatus = function(ids, callback) {\r\n  var isArray = _.isArray(ids);\r\n  var res = this._invoke(\"checkStatus\", { asyncProcessId: ids });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~DescribeMetadataResult\r\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\r\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\r\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\r\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\r\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\r\n * @prop {String} metadataObjects.suffix - The file suffix for this component\r\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\r\n * @prop {String} organizationNamespace - The namespace of the organization\r\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\r\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\r\n */\r\n\r\n/**\r\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\r\n * custom objects, custom fields on standard objects, tab sets that define an app,\r\n * and many other components.\r\n *\r\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\r\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\r\n */\r\nMetadata.prototype.describe = function(version, callback) {\r\n  if (!_.isString(version)) {\r\n    callback = version;\r\n    version = this._conn.version;\r\n  }\r\n  return this._invoke(\"describeMetadata\", { asOfVersion: version }).then(function(res) {\r\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];\r\n    res.metadataObjects = _.map(res.metadataObjects, function(mo) {\r\n      if (mo.childXmlNames) {\r\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];\r\n      }\r\n      mo.inFolder = mo.inFolder === 'true';\r\n      mo.metaFile = mo.metaFile === 'true';\r\n      return mo;\r\n    });\r\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\r\n    res.testRequired = res.testRequired === 'true';\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~ListMetadataQuery\r\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\r\n * @prop {String} [folder] - The folder associated with the component.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Metadata~FileProperties\r\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\r\n * @prop {String} createdById - ID of the user who created the file\r\n * @prop {String} createdByName - Name of the user who created the file\r\n * @prop {String} createdDate - Date and time when the file was created\r\n * @prop {String} fileName - Name of the file\r\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\r\n * @prop {String} id - ID of the file\r\n * @prop {String} lastModifiedById - ID of the user who last modified the file\r\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\r\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\r\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\r\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\r\n */\r\n\r\n/**\r\n * Retrieves property information about metadata components in your organization\r\n *\r\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\r\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\r\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\r\n */\r\nMetadata.prototype.list = function(queries, version, callback) {\r\n  if (!_.isString(version)) {\r\n    callback = version;\r\n    version = this._conn.version;\r\n  }\r\n  if (!_.isArray(queries)) {\r\n    queries = [ queries ];\r\n  }\r\n  return this._invoke(\"listMetadata\", { queries: queries, asOfVersion: version }, callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~RetrieveRequest\r\n */\r\n\r\n/**\r\n * Retrieves XML file representations of components in an organization\r\n *\r\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\r\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\r\n * @returns {Metadata~RetrieveResultLocator}\r\n */\r\nMetadata.prototype.retrieve = function(request, callback) {\r\n  var res = this._invoke(\"retrieve\", { request: request });\r\n  return new RetrieveResultLocator(this, res).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\r\n *\r\n * @param {String} id - Async process id returned from previous retrieve request\r\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~RetrieveResult>}\r\n */\r\nMetadata.prototype.checkRetrieveStatus = function(id, callback) {\r\n  return this._invoke(\"checkRetrieveStatus\", { asyncProcessId: id }, callback);\r\n};\r\n\r\n/**\r\n * Deploy components into an organization using zipped file representations\r\n *\r\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\r\n * @param {Object} [options] - Options used in deployment\r\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\r\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\r\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\r\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\r\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\r\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\r\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\r\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\r\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\r\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\r\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\r\n * @returns {Metadata~DeployResultLocator}\r\n */\r\nMetadata.prototype.deploy = function(zipInput, options, callback) {\r\n  if (!options || _.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var deferred = Promise.defer();\r\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\r\n    var bufs = [];\r\n    zipInput.on('data', function(d) {\r\n      bufs.push(d);\r\n    });\r\n    zipInput.on('end', function() {\r\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\r\n    });\r\n    // zipInput.resume();\r\n  } else if (zipInput instanceof Buffer) {\r\n    deferred.resolve(zipInput.toString('base64'));\r\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\r\n    deferred.resolve(zipInput);\r\n  } else {\r\n    throw \"Unexpected zipInput type\";\r\n  }\r\n\r\n  var self = this;\r\n  var res = deferred.promise.then(function(zipContentB64) {\r\n    return self._invoke(\"deploy\", {\r\n      ZipFile: zipContentB64,\r\n      DeployOptions: options\r\n    }, callback);\r\n  });\r\n  return new DeployResultLocator(this, res).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of declarative metadata call deploy()\r\n *\r\n * @param {String} id - Async process id returned from previous deploy request\r\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\r\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DeployResult>}\r\n */\r\nMetadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {\r\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\r\n    includeDetails = !!includeDetails;\r\n  } else {\r\n    callback = includeDetails;\r\n    includeDetails = false;\r\n  }\r\n  return this._invoke(\"checkDeployStatus\", {\r\n    asyncProcessId: id,\r\n    includeDetails : includeDetails\r\n  }).then(function(res) {\r\n    res.done = res.done === 'true';\r\n    res.success = res.success === 'true';\r\n    res.checkOnly = res.checkOnly === 'true';\r\n    if (res.ignoreWarnings) {\r\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\r\n    }\r\n    if (res.rollbackOnError) {\r\n      res.rollbackOnError = res.rollbackOnError === 'true';\r\n    }\r\n    res.numberComponentErrors = Number(res.numberComponentErrors);\r\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\r\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\r\n    res.numberTestErrors = Number(res.numberTestErrors);\r\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\r\n    res.numberTestsTotal = Number(res.numberTestsTotal);\r\n\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * @typedef {Object} Metadata~AsyncResult\r\n * @prop {Boolean} done - Indicates whether the call has completed or not\r\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\r\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\r\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\r\n * @prop {String} [message] - Message corresponding to the statusCode field returned\r\n */\r\n\r\n/**\r\n * The locator class for Metadata API asynchronous call result\r\n *\r\n * @protected\r\n * @class Metadata~AsyncResultLocator\r\n * @extends events.EventEmitter\r\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\r\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\r\n */\r\nvar AsyncResultLocator = function(meta, results, isArray) {\r\n  this._meta = meta;\r\n  this._results = results;\r\n  this._isArray = isArray;\r\n};\r\n\r\ninherits(AsyncResultLocator, events.EventEmitter);\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Metadata~AsyncResultLocator#then\r\n */\r\nAsyncResultLocator.prototype.then = function(onResolve, onReject) {\r\n  var self = this;\r\n  return this._results.then(function(results) {\r\n    var convertType = function(res) {\r\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\r\n        return null;\r\n      }\r\n      res.done = res.done === 'true';\r\n      return res;\r\n    };\r\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\r\n    if (self._isArray && !_.isArray(results)) {\r\n      results = [ results ];\r\n    }\r\n    return onResolve(results);\r\n  }, onReject);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Metadata~AsyncResultLocator#thenCall\r\n */\r\nAsyncResultLocator.prototype.thenCall = function(callback) {\r\n  return _.isFunction(callback) ? this.then(function(res) {\r\n    process.nextTick(function() {\r\n      callback(null, res);\r\n    });\r\n  }, function(err) {\r\n    process.nextTick(function() {\r\n      callback(err);\r\n    });\r\n  }) : this;\r\n};\r\n\r\n/**\r\n * Check the status of async request\r\n *\r\n * @method Metadata~AsyncResultLocator#check\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\r\n */\r\nAsyncResultLocator.prototype.check = function(callback) {\r\n  var self = this;\r\n  var meta = this._meta;\r\n  return this.then(function(results) {\r\n    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;\r\n    self._ids = ids;\r\n    return meta.checkStatus(ids);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Polling until async call status becomes complete or error\r\n *\r\n * @method Metadata~AsyncResultLocator#poll\r\n * @param {Number} interval - Polling interval in milliseconds\r\n * @param {Number} timeout - Polling timeout in milliseconds\r\n */\r\nAsyncResultLocator.prototype.poll = function(interval, timeout) {\r\n  var self = this;\r\n  var startTime = new Date().getTime();\r\n  var poll = function() {\r\n    var now = new Date().getTime();\r\n    if (startTime + timeout < now) {\r\n      var errMsg = \"Polling time out.\";\r\n      if (self._ids) {\r\n        errMsg += \" Process Id = \" + self._ids;\r\n      }\r\n      self.emit('error', new Error(errMsg));\r\n      return;\r\n    }\r\n    self.check().then(function(results) {\r\n      var done = true;\r\n      var resultArr = _.isArray(results) ? results : [ results ];\r\n      for (var i=0, len=resultArr.length; i<len; i++) {\r\n        var result = resultArr[i];\r\n        if (result && !result.done) {\r\n          self.emit('progress', result);\r\n          done = false;\r\n        }\r\n      }\r\n      if (done) {\r\n        self.emit('complete', results);\r\n      } else {\r\n        setTimeout(poll, interval);\r\n      }\r\n    }, function(err) {\r\n      self.emit('error', err);\r\n    });\r\n  };\r\n  setTimeout(poll, interval);\r\n};\r\n\r\n/**\r\n * Check and wait until the async requests become in completed status\r\n *\r\n * @method Metadata~AsyncResultLocator#complete\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\r\n */\r\nAsyncResultLocator.prototype.complete = function(callback) {\r\n  var deferred = Promise.defer();\r\n  this.on('complete', function(results) {\r\n    deferred.resolve(results);\r\n  });\r\n  this.on('error', function(err) {\r\n    deferred.reject(err);\r\n  });\r\n  var meta = this._meta;\r\n  this.poll(meta.pollInterval, meta.pollTimeout);\r\n  return deferred.promise.thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * The locator class to track retreive() Metadata API call result\r\n *\r\n * @protected\r\n * @class Metadata~RetrieveResultLocator\r\n * @extends Metadata~AsyncResultLocator\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\r\n */\r\nvar RetrieveResultLocator = function(meta, result) {\r\n  RetrieveResultLocator.super_.call(this, meta, result);\r\n};\r\n\r\ninherits(RetrieveResultLocator, AsyncResultLocator);\r\n\r\n/**\r\n * @typedef {Object} Metadata~RetrieveResult\r\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\r\n * @prop {String} id - ID of the component being retrieved\r\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\r\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\r\n */\r\n\r\n/**\r\n * Check and wait until the async request becomes in completed status,\r\n * and retrieve the result data.\r\n *\r\n * @memthod Metadata~RetrieveResultLocator#complete\r\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~RetrieveResult>}\r\n */\r\nRetrieveResultLocator.prototype.complete = function(callback) {\r\n  var meta = this._meta;\r\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {\r\n    return meta.checkRetrieveStatus(result.id);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Change the retrieved result to Node.js readable stream\r\n *\r\n * @method Metadata~RetrieveResultLocator#stream\r\n * @returns {stream.Readable}\r\n */\r\nRetrieveResultLocator.prototype.stream = function() {\r\n  var self = this;\r\n  var resultStream = new stream.Readable();\r\n  var reading = false;\r\n  resultStream._read = function() {\r\n    if (reading) { return; }\r\n    reading = true;\r\n    self.complete(function(err, result) {\r\n      if (err) {\r\n        resultStream.emit('error', err);\r\n      } else {\r\n        resultStream.push(new Buffer(result.zipFile, 'base64'));\r\n        resultStream.push(null);\r\n      }\r\n    });\r\n  };\r\n  return resultStream;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * The locator class to track deploy() Metadata API call result\r\n *\r\n * @protected\r\n * @class Metadata~DeployResultLocator\r\n * @extends Metadata~AsyncResultLocator\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\r\n */\r\nvar DeployResultLocator = function(meta, result) {\r\n  DeployResultLocator.super_.call(this, meta, result);\r\n};\r\n\r\ninherits(DeployResultLocator, AsyncResultLocator);\r\n\r\n/**\r\n * @typedef {Object} Metadata~DeployResult\r\n * @prop {String} id - ID of the component being deployed\r\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\r\n * @prop {String} completedDate - Timestamp for when the deployment process ended\r\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\r\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\r\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\r\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\r\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\r\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\r\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\r\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\r\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\r\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\r\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\r\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\r\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\r\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\r\n * @prop {String} startDate - Timestamp for when the deployment process began\r\n * @prop {String} status - Indicates the current state of the deployment\r\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\r\n */\r\n\r\n/**\r\n * Check and wait until the async request becomes in completed status,\r\n * and retrieve the result data.\r\n *\r\n * @method Metadata~DeployResultLocator#complete\r\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DeployResult>}\r\n */\r\nDeployResultLocator.prototype.complete = function(includeDetails, callback) {\r\n  if (_.isFunction(includeDetails)) {\r\n    callback = includeDetails;\r\n    includeDetails = false;\r\n  }\r\n  var meta = this._meta;\r\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {\r\n    return meta.checkDeployStatus(result.id, includeDetails);\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.metadata = new Metadata(conn);\r\n});\r\n\n}).call(this,require('_process'),require(\"buffer\").Buffer)\n\n},{\"_process\":6,\"buffer\":3}],2:[function(require,module,exports){\n'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n\n},{}],3:[function(require,module,exports){\n(function (global){\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var foundIndex = -1\n  for (var i = 0; byteOffset + i < arrLength; i++) {\n    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n      if (foundIndex === -1) foundIndex = i\n      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize\n    } else {\n      if (foundIndex !== -1) i -= i - foundIndex\n      foundIndex = -1\n    }\n  }\n  return -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    // special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(this, val, byteOffset, encoding)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset, encoding)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; i++) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"base64-js\":2,\"ieee754\":4,\"isarray\":5}],4:[function(require,module,exports){\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n},{}],5:[function(require,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n},{}],6:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[1])(1)\n});\n\n","/*global process, Buffer */\r\n/**\r\n * @file Manages Salesforce Metadata API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = window.jsforce.require('inherits'),\r\n    events  = window.jsforce.require('events'),\r\n    stream  = window.jsforce.require('readable-stream'),\r\n    _       = window.jsforce.require('lodash/core'),\r\n    jsforce = window.jsforce.require('./core'),\r\n    Promise = window.jsforce.require('./promise'),\r\n    SOAP    = window.jsforce.require('./soap');\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * Class for Salesforce Metadata API\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Metadata = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n\r\n/**\r\n * Polling interval in milliseconds\r\n * @type {Number}\r\n */\r\nMetadata.prototype.pollInterval = 1000;\r\n\r\n/**\r\n * Polling timeout in milliseconds\r\n * @type {Number}\r\n */\r\nMetadata.prototype.pollTimeout = 10000;\r\n\r\n\r\n/**\r\n * Call Metadata API SOAP endpoint\r\n *\r\n * @private\r\n */\r\nMetadata.prototype._invoke = function(method, message, callback) {\r\n  var soapEndpoint = new SOAP(this._conn, {\r\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\r\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\r\n  });\r\n  return soapEndpoint.invoke(method, message).then(function(res) {\r\n    return res.result;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} Metadata~MetadataInfo\r\n * @prop {String} fullName - The name of the component\r\n */\r\n\r\n/**\r\n * Asynchronously adds one or more new metadata components to the organization.\r\n *\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.createAsync = function(type, metadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  var res = this._invoke(\"create\", { metadata: metadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~SaveResult\r\n * @prop {Boolean} success - True if metadata is successfully saved\r\n * @prop {String} fullName - Full name of metadata object\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToSaveResult(result) {\r\n  var saveResult = _.clone(result);\r\n  saveResult.success = saveResult.success === 'true';\r\n  return saveResult;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Metadata~UpsertResult\r\n * @prop {Boolean} success - True if metadata is successfully saved\r\n * @prop {String} fullName - Full name of metadata object\r\n * @prop {Boolean} created - True if metadata is newly created\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToUpsertResult(result) {\r\n  var upsertResult = convertToSaveResult(result);\r\n  upsertResult.created = upsertResult.created === 'true';\r\n  return upsertResult;\r\n}\r\n\r\n/**\r\n * Synonym of Metadata#create().\r\n *\r\n * @method Metadata#createSync\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n/**\r\n * Synchronously adds one or more new metadata components to the organization.\r\n *\r\n * @method Metadata#create\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.createSync =\r\nMetadata.prototype.create = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"createMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToMetadataInfo(rec) {\r\n  var metadataInfo = _.clone(rec);\r\n  delete metadataInfo.$;\r\n  return metadataInfo;\r\n}\r\n\r\n/**\r\n * Synonym of Metadata#read()\r\n *\r\n * @method Metadata#readSync\r\n * @param {String} type - The type of metadata to read\r\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\r\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\r\n */\r\n/**\r\n * Synchronously read specified metadata components in the organization.\r\n *\r\n * @method Metadata#read\r\n * @param {String} type - The type of metadata to read\r\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\r\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\r\n */\r\nMetadata.prototype.readSync =\r\nMetadata.prototype.read = function(type, fullNames, callback) {\r\n  return this._invoke(\"readMetadata\", { type: type, fullNames: fullNames }).then(function(res) {\r\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~UpdateMetadataInfo\r\n * @prop {String} currentName - The API name of the component or field before the update\r\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\r\n */\r\n\r\n/**\r\n * Asynchronously updates one or more metadata components in the organization.\r\n *\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.updateAsync = function(type, updateMetadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(umd) {\r\n    umd.metadata[\"@xsi:type\"] = type;\r\n    return umd;\r\n  };\r\n  var isArray = _.isArray(updateMetadata);\r\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\r\n  var res = this._invoke(\"update\", { updateMetadata: updateMetadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#update().\r\n *\r\n * @method Metadata#updateSync\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n/**\r\n * Synchronously updates one or more metadata components in the organization.\r\n *\r\n * @method Metadata#update\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.updateSync =\r\nMetadata.prototype.update = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"updateMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#upsert().\r\n *\r\n * @method Metadata#upsertSync\r\n * @param {String} type - The type of metadata to upsert\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\r\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\r\n */\r\n/**\r\n * Upserts one or more components in your organization's data.\r\n *\r\n * @method Metadata#upsert\r\n * @param {String} type - The type of metadata to upsert\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\r\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\r\n */\r\nMetadata.prototype.upsertSync =\r\nMetadata.prototype.upsert = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"upsertMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Asynchronously deletes specified metadata components in the organization.\r\n *\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.deleteAsync = function(type, metadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(md) {\r\n    if (_.isString(md)) {\r\n      md = { fullName : md };\r\n    }\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  var res = this._invoke(\"delete\", { metadata: metadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#delete().\r\n *\r\n * @deprecated\r\n * @method Metadata#del\r\n * @param {String} [type] - The type of metadata to delete\r\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\n/**\r\n * Synonym of Metadata#delete().\r\n *\r\n * @method Metadata#deleteSync\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n\r\n/**\r\n * Synchronously deletes specified metadata components in the organization.\r\n *\r\n * @method Metadata#delete\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.del =\r\nMetadata.prototype.deleteSync =\r\nMetadata.prototype[\"delete\"] = function(type, fullNames, callback) {\r\n  return this._invoke(\"deleteMetadata\", { type: type, fullNames: fullNames }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Rename fullname of a metadata component in the organization\r\n *\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String} oldFullName - The original fullName of metadata\r\n * @param {String} newFullName - The new fullName of metadata\r\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult>}\r\n */\r\nMetadata.prototype.rename = function(type, oldFullName, newFullName, callback) {\r\n  return this._invoke(\"renameMetadata\", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {\r\n    return convertToSaveResult(result);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of asynchronous metadata calls\r\n *\r\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.checkStatus = function(ids, callback) {\r\n  var isArray = _.isArray(ids);\r\n  var res = this._invoke(\"checkStatus\", { asyncProcessId: ids });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~DescribeMetadataResult\r\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\r\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\r\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\r\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\r\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\r\n * @prop {String} metadataObjects.suffix - The file suffix for this component\r\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\r\n * @prop {String} organizationNamespace - The namespace of the organization\r\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\r\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\r\n */\r\n\r\n/**\r\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\r\n * custom objects, custom fields on standard objects, tab sets that define an app,\r\n * and many other components.\r\n *\r\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\r\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\r\n */\r\nMetadata.prototype.describe = function(version, callback) {\r\n  if (!_.isString(version)) {\r\n    callback = version;\r\n    version = this._conn.version;\r\n  }\r\n  return this._invoke(\"describeMetadata\", { asOfVersion: version }).then(function(res) {\r\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];\r\n    res.metadataObjects = _.map(res.metadataObjects, function(mo) {\r\n      if (mo.childXmlNames) {\r\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];\r\n      }\r\n      mo.inFolder = mo.inFolder === 'true';\r\n      mo.metaFile = mo.metaFile === 'true';\r\n      return mo;\r\n    });\r\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\r\n    res.testRequired = res.testRequired === 'true';\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~ListMetadataQuery\r\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\r\n * @prop {String} [folder] - The folder associated with the component.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Metadata~FileProperties\r\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\r\n * @prop {String} createdById - ID of the user who created the file\r\n * @prop {String} createdByName - Name of the user who created the file\r\n * @prop {String} createdDate - Date and time when the file was created\r\n * @prop {String} fileName - Name of the file\r\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\r\n * @prop {String} id - ID of the file\r\n * @prop {String} lastModifiedById - ID of the user who last modified the file\r\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\r\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\r\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\r\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\r\n */\r\n\r\n/**\r\n * Retrieves property information about metadata components in your organization\r\n *\r\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\r\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\r\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\r\n */\r\nMetadata.prototype.list = function(queries, version, callback) {\r\n  if (!_.isString(version)) {\r\n    callback = version;\r\n    version = this._conn.version;\r\n  }\r\n  if (!_.isArray(queries)) {\r\n    queries = [ queries ];\r\n  }\r\n  return this._invoke(\"listMetadata\", { queries: queries, asOfVersion: version }, callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~RetrieveRequest\r\n */\r\n\r\n/**\r\n * Retrieves XML file representations of components in an organization\r\n *\r\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\r\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\r\n * @returns {Metadata~RetrieveResultLocator}\r\n */\r\nMetadata.prototype.retrieve = function(request, callback) {\r\n  var res = this._invoke(\"retrieve\", { request: request });\r\n  return new RetrieveResultLocator(this, res).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\r\n *\r\n * @param {String} id - Async process id returned from previous retrieve request\r\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~RetrieveResult>}\r\n */\r\nMetadata.prototype.checkRetrieveStatus = function(id, callback) {\r\n  return this._invoke(\"checkRetrieveStatus\", { asyncProcessId: id }, callback);\r\n};\r\n\r\n/**\r\n * Deploy components into an organization using zipped file representations\r\n *\r\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\r\n * @param {Object} [options] - Options used in deployment\r\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\r\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\r\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\r\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\r\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\r\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\r\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\r\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\r\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\r\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\r\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\r\n * @returns {Metadata~DeployResultLocator}\r\n */\r\nMetadata.prototype.deploy = function(zipInput, options, callback) {\r\n  if (!options || _.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var deferred = Promise.defer();\r\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\r\n    var bufs = [];\r\n    zipInput.on('data', function(d) {\r\n      bufs.push(d);\r\n    });\r\n    zipInput.on('end', function() {\r\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\r\n    });\r\n    // zipInput.resume();\r\n  } else if (zipInput instanceof Buffer) {\r\n    deferred.resolve(zipInput.toString('base64'));\r\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\r\n    deferred.resolve(zipInput);\r\n  } else {\r\n    throw \"Unexpected zipInput type\";\r\n  }\r\n\r\n  var self = this;\r\n  var res = deferred.promise.then(function(zipContentB64) {\r\n    return self._invoke(\"deploy\", {\r\n      ZipFile: zipContentB64,\r\n      DeployOptions: options\r\n    }, callback);\r\n  });\r\n  return new DeployResultLocator(this, res).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of declarative metadata call deploy()\r\n *\r\n * @param {String} id - Async process id returned from previous deploy request\r\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\r\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DeployResult>}\r\n */\r\nMetadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {\r\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\r\n    includeDetails = !!includeDetails;\r\n  } else {\r\n    callback = includeDetails;\r\n    includeDetails = false;\r\n  }\r\n  return this._invoke(\"checkDeployStatus\", {\r\n    asyncProcessId: id,\r\n    includeDetails : includeDetails\r\n  }).then(function(res) {\r\n    res.done = res.done === 'true';\r\n    res.success = res.success === 'true';\r\n    res.checkOnly = res.checkOnly === 'true';\r\n    if (res.ignoreWarnings) {\r\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\r\n    }\r\n    if (res.rollbackOnError) {\r\n      res.rollbackOnError = res.rollbackOnError === 'true';\r\n    }\r\n    res.numberComponentErrors = Number(res.numberComponentErrors);\r\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\r\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\r\n    res.numberTestErrors = Number(res.numberTestErrors);\r\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\r\n    res.numberTestsTotal = Number(res.numberTestsTotal);\r\n\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * @typedef {Object} Metadata~AsyncResult\r\n * @prop {Boolean} done - Indicates whether the call has completed or not\r\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\r\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\r\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\r\n * @prop {String} [message] - Message corresponding to the statusCode field returned\r\n */\r\n\r\n/**\r\n * The locator class for Metadata API asynchronous call result\r\n *\r\n * @protected\r\n * @class Metadata~AsyncResultLocator\r\n * @extends events.EventEmitter\r\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\r\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\r\n */\r\nvar AsyncResultLocator = function(meta, results, isArray) {\r\n  this._meta = meta;\r\n  this._results = results;\r\n  this._isArray = isArray;\r\n};\r\n\r\ninherits(AsyncResultLocator, events.EventEmitter);\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Metadata~AsyncResultLocator#then\r\n */\r\nAsyncResultLocator.prototype.then = function(onResolve, onReject) {\r\n  var self = this;\r\n  return this._results.then(function(results) {\r\n    var convertType = function(res) {\r\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\r\n        return null;\r\n      }\r\n      res.done = res.done === 'true';\r\n      return res;\r\n    };\r\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\r\n    if (self._isArray && !_.isArray(results)) {\r\n      results = [ results ];\r\n    }\r\n    return onResolve(results);\r\n  }, onReject);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Metadata~AsyncResultLocator#thenCall\r\n */\r\nAsyncResultLocator.prototype.thenCall = function(callback) {\r\n  return _.isFunction(callback) ? this.then(function(res) {\r\n    process.nextTick(function() {\r\n      callback(null, res);\r\n    });\r\n  }, function(err) {\r\n    process.nextTick(function() {\r\n      callback(err);\r\n    });\r\n  }) : this;\r\n};\r\n\r\n/**\r\n * Check the status of async request\r\n *\r\n * @method Metadata~AsyncResultLocator#check\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\r\n */\r\nAsyncResultLocator.prototype.check = function(callback) {\r\n  var self = this;\r\n  var meta = this._meta;\r\n  return this.then(function(results) {\r\n    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;\r\n    self._ids = ids;\r\n    return meta.checkStatus(ids);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Polling until async call status becomes complete or error\r\n *\r\n * @method Metadata~AsyncResultLocator#poll\r\n * @param {Number} interval - Polling interval in milliseconds\r\n * @param {Number} timeout - Polling timeout in milliseconds\r\n */\r\nAsyncResultLocator.prototype.poll = function(interval, timeout) {\r\n  var self = this;\r\n  var startTime = new Date().getTime();\r\n  var poll = function() {\r\n    var now = new Date().getTime();\r\n    if (startTime + timeout < now) {\r\n      var errMsg = \"Polling time out.\";\r\n      if (self._ids) {\r\n        errMsg += \" Process Id = \" + self._ids;\r\n      }\r\n      self.emit('error', new Error(errMsg));\r\n      return;\r\n    }\r\n    self.check().then(function(results) {\r\n      var done = true;\r\n      var resultArr = _.isArray(results) ? results : [ results ];\r\n      for (var i=0, len=resultArr.length; i<len; i++) {\r\n        var result = resultArr[i];\r\n        if (result && !result.done) {\r\n          self.emit('progress', result);\r\n          done = false;\r\n        }\r\n      }\r\n      if (done) {\r\n        self.emit('complete', results);\r\n      } else {\r\n        setTimeout(poll, interval);\r\n      }\r\n    }, function(err) {\r\n      self.emit('error', err);\r\n    });\r\n  };\r\n  setTimeout(poll, interval);\r\n};\r\n\r\n/**\r\n * Check and wait until the async requests become in completed status\r\n *\r\n * @method Metadata~AsyncResultLocator#complete\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\r\n */\r\nAsyncResultLocator.prototype.complete = function(callback) {\r\n  var deferred = Promise.defer();\r\n  this.on('complete', function(results) {\r\n    deferred.resolve(results);\r\n  });\r\n  this.on('error', function(err) {\r\n    deferred.reject(err);\r\n  });\r\n  var meta = this._meta;\r\n  this.poll(meta.pollInterval, meta.pollTimeout);\r\n  return deferred.promise.thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * The locator class to track retreive() Metadata API call result\r\n *\r\n * @protected\r\n * @class Metadata~RetrieveResultLocator\r\n * @extends Metadata~AsyncResultLocator\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\r\n */\r\nvar RetrieveResultLocator = function(meta, result) {\r\n  RetrieveResultLocator.super_.call(this, meta, result);\r\n};\r\n\r\ninherits(RetrieveResultLocator, AsyncResultLocator);\r\n\r\n/**\r\n * @typedef {Object} Metadata~RetrieveResult\r\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\r\n * @prop {String} id - ID of the component being retrieved\r\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\r\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\r\n */\r\n\r\n/**\r\n * Check and wait until the async request becomes in completed status,\r\n * and retrieve the result data.\r\n *\r\n * @memthod Metadata~RetrieveResultLocator#complete\r\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~RetrieveResult>}\r\n */\r\nRetrieveResultLocator.prototype.complete = function(callback) {\r\n  var meta = this._meta;\r\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {\r\n    return meta.checkRetrieveStatus(result.id);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Change the retrieved result to Node.js readable stream\r\n *\r\n * @method Metadata~RetrieveResultLocator#stream\r\n * @returns {stream.Readable}\r\n */\r\nRetrieveResultLocator.prototype.stream = function() {\r\n  var self = this;\r\n  var resultStream = new stream.Readable();\r\n  var reading = false;\r\n  resultStream._read = function() {\r\n    if (reading) { return; }\r\n    reading = true;\r\n    self.complete(function(err, result) {\r\n      if (err) {\r\n        resultStream.emit('error', err);\r\n      } else {\r\n        resultStream.push(new Buffer(result.zipFile, 'base64'));\r\n        resultStream.push(null);\r\n      }\r\n    });\r\n  };\r\n  return resultStream;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * The locator class to track deploy() Metadata API call result\r\n *\r\n * @protected\r\n * @class Metadata~DeployResultLocator\r\n * @extends Metadata~AsyncResultLocator\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\r\n */\r\nvar DeployResultLocator = function(meta, result) {\r\n  DeployResultLocator.super_.call(this, meta, result);\r\n};\r\n\r\ninherits(DeployResultLocator, AsyncResultLocator);\r\n\r\n/**\r\n * @typedef {Object} Metadata~DeployResult\r\n * @prop {String} id - ID of the component being deployed\r\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\r\n * @prop {String} completedDate - Timestamp for when the deployment process ended\r\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\r\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\r\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\r\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\r\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\r\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\r\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\r\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\r\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\r\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\r\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\r\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\r\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\r\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\r\n * @prop {String} startDate - Timestamp for when the deployment process began\r\n * @prop {String} status - Indicates the current state of the deployment\r\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\r\n */\r\n\r\n/**\r\n * Check and wait until the async request becomes in completed status,\r\n * and retrieve the result data.\r\n *\r\n * @method Metadata~DeployResultLocator#complete\r\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DeployResult>}\r\n */\r\nDeployResultLocator.prototype.complete = function(includeDetails, callback) {\r\n  if (_.isFunction(includeDetails)) {\r\n    callback = includeDetails;\r\n    includeDetails = false;\r\n  }\r\n  var meta = this._meta;\r\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {\r\n    return meta.checkDeployStatus(result.id, includeDetails);\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.metadata = new Metadata(conn);\r\n});\r\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var foundIndex = -1\n  for (var i = 0; byteOffset + i < arrLength; i++) {\n    if (read(arr, byteOffset + i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n      if (foundIndex === -1) foundIndex = i\n      if (i - foundIndex + 1 === valLength) return (byteOffset + foundIndex) * indexSize\n    } else {\n      if (foundIndex !== -1) i -= i - foundIndex\n      foundIndex = -1\n    }\n  }\n  return -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  if (Buffer.isBuffer(val)) {\n    // special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(this, val, byteOffset, encoding)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset, encoding)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; i++) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\n\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\n(function () {\n  try {\n    cachedSetTimeout = setTimeout;\n  } catch (e) {\n    cachedSetTimeout = function () {\n      throw new Error('setTimeout is not defined');\n    }\n  }\n  try {\n    cachedClearTimeout = clearTimeout;\n  } catch (e) {\n    cachedClearTimeout = function () {\n      throw new Error('clearTimeout is not defined');\n    }\n  }\n} ())\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = cachedSetTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    cachedClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        cachedSetTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":"/source/"}